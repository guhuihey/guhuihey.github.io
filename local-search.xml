<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/07/12/Pasted%20image%2020230707131830.png/"/>
    <url>/2023/07/12/Pasted%20image%2020230707131830.png/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows wsl智能合约编程环境搭建</title>
    <link href="/2023/07/11/Windows%20wsl%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/07/11/Windows%20wsl%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="下载wsl（windows子系统）"><a href="#下载wsl（windows子系统）" class="headerlink" title="下载wsl（windows子系统）"></a>下载wsl（windows子系统）</h1><p>运行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">wsl <span class="hljs-comment">--install</span><br></code></pre></td></tr></table></figure><p>但是似乎不能正常启动<br>会报<br><code>0x80004002</code>之类的错误<br>查了一下针对我遇到的这类错误运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><br><span class="hljs-built_in">Enable-WindowsOptionalFeature</span> <span class="hljs-literal">-Online</span> <span class="hljs-literal">-FeatureName</span> Microsoft<span class="hljs-literal">-Windows-Subsystem-Linux</span><br></code></pre></td></tr></table></figure><p>即可，在后来使用的时候也遇到了无法启动的问题，似乎是因为windows更新把子系统的组件删掉了，需要<br>在任务面板中打开程序在windows服务中选择子系统相关的选项即可<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202307120858980.png"></p><h1 id="vscode编程环境搭建"><a href="#vscode编程环境搭建" class="headerlink" title="vscode编程环境搭建"></a>vscode编程环境搭建</h1><h2 id="连接wsl"><a href="#连接wsl" class="headerlink" title="连接wsl"></a>连接wsl</h2><p>可以在vscode中ctrl+shift+p创建wsl窗口<br>或者在wsl中输入code .<br>即可拥有liunx命令行版的vscode</p><h2 id="子系统虚拟环境搭建"><a href="#子系统虚拟环境搭建" class="headerlink" title="子系统虚拟环境搭建"></a>子系统虚拟环境搭建</h2><p>然后配置wsl中的nvm环境<br>首先在创建好的文件夹里执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -o- https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/nvm-sh/</span>nvm<span class="hljs-regexp">/v0.39.1/i</span>nstall.sh<br></code></pre></td></tr></table></figure><p>然后重启wsl即可查看nvm版本</p><p>然后执行</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">nvm <span class="hljs-keyword">install</span> nodejs的版本号<br></code></pre></td></tr></table></figure><p>安装js即可</p><h2 id="代码格式化工具"><a href="#代码格式化工具" class="headerlink" title="代码格式化工具"></a>代码格式化工具</h2><p>再vscode中下载solidity+hardhat（现在改名了变成了solidity一个黄色的以太坊图标）<br>它可以使代码高亮<br>然后再安装一个格式化文件prettier<br>并且配置json文件（ctrl+shift+p选择open setting json）<br>在上一条语句后面加上逗号：<br>把以下语句加入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><br>    &quot;<span class="hljs-selector-attr">[solidity]</span>&quot;: &#123;<br><br>        &quot;editor<span class="hljs-selector-class">.defaultFormatter</span>&quot;: <span class="hljs-string">&quot;NomicFoundation.hardhat-solidity&quot;</span><br><br>    &#125;,<br>   <br>    &quot;<span class="hljs-selector-attr">[javascript]</span>&quot;: &#123;<br><br>        &quot;editor<span class="hljs-selector-class">.defaultFormatter</span>&quot;:<span class="hljs-string">&quot;esbenp.prettier-vscode&quot;</span><br><br>    &#125;,<br></code></pre></td></tr></table></figure><p>即可实现vs自动格式化<br>当然除此之外还需要打开open user setting<br>配置format on save 和default format</p><p>同样prettier也可以将solidity格式化而不一定要使用hardhat<br>可以通过<br><code>yarn add prettier prettier-plugin-solidity</code><br>安装prettier的solidity插件然后在项目文件夹中创建一个.prettierrc文件，然后输入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br>    <span class="hljs-regexp">/*  prettier的配置 */</span><br>    <span class="hljs-string">&quot;prettier.printWidth&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-regexp">//</span> 超过最大值换行<br>    <span class="hljs-string">&quot;prettier.tabWidth&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-regexp">//</span> 缩进字节数<br>    <span class="hljs-string">&quot;prettier.useTabs&quot;</span>: false, <span class="hljs-regexp">//</span> 缩进不使用tab，使用空格<br>    <span class="hljs-string">&quot;prettier.semi&quot;</span>: true, <span class="hljs-regexp">//</span> 句尾添加分号<br>    <span class="hljs-string">&quot;prettier.singleQuote&quot;</span>: true, <span class="hljs-regexp">//</span> 使用单引号代替双引号<br>    <span class="hljs-regexp">//</span>这里只是示例更多相关设置可以自行查询<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h2><p>需要安装安装yarn，运行命令corepack enable即可<br>然后获取solc<br>运行 yarn add solc或者npm类命令也可<br>yarn add <a href="mailto:&#x73;&#111;&#108;&#x63;&#x40;&#48;&#x2e;&#x38;&#x2e;&#48;">&#x73;&#111;&#108;&#x63;&#x40;&#48;&#x2e;&#x38;&#x2e;&#48;</a>可指定solc的版本<br>yarn global add solc即可全局安装</p><p>然后运行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">yarn solcjs <span class="hljs-attr">--bin</span> <span class="hljs-attr">--abi</span> <span class="hljs-attr">--include-path</span> node_modules/ <span class="hljs-attr">--base-path</span> . -o . simple-storage<span class="hljs-selector-class">.sol</span><br><span class="hljs-comment">//注意哈，这里的simple-storage.sol是目录下的文件名</span><br></code></pre></td></tr></table></figure><p>编译simple-storage.sol得到编译后的文件</p><p>同时可以将这个脚本加入到<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202307120919175.png"><br>即可使用</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yarn compile</span> <br><br></code></pre></td></tr></table></figure><p>快速编译</p><h1 id="虚拟链上环境"><a href="#虚拟链上环境" class="headerlink" title="虚拟链上环境"></a>虚拟链上环境</h1><h2 id="ganache"><a href="#ganache" class="headerlink" title="ganache"></a>ganache</h2><p>这里选择ganache在windows上安装，当然也可以直接选择在子系统上安装<br>下面是转自github上大佬对相关问题的解决</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">**选项 <span class="hljs-number">1</span>：如果您想在 WSL 本身上安装和运行 Ganache👇**<br><br><span class="hljs-number">1</span>.  在 WSL 上安装 Ganache  <br>    `yarn <span class="hljs-keyword">add </span>ganache`<br>    <br><span class="hljs-number">2</span>.  运行甘纳许  <br>    `yarn run ganache`<br>    <br><span class="hljs-number">3</span>.  从终端屏幕底部 复制 RPC URL ( **<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8545</span> )，上面写着****RPC listening on <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8545</span>**  <br>    并将其粘贴到 ethers.<span class="hljs-keyword">js </span><span class="hljs-keyword">JsonRpcProvider( </span>) 函数参数中。<br>    <br><span class="hljs-number">4</span>.  还要在终端屏幕上滚动时复制任何**私钥，并将其粘贴到 ethers.<span class="hljs-keyword">js </span>Wallet( ) 函数参数中。**<br>    <br><span class="hljs-number">5</span>.  现在让这个终端在后台运行，因为我们希望 Ganache 服务器运行。  <br>    因此，打开一个**新终端** 并通过运行以下命令来运行 deploy.<span class="hljs-keyword">js </span>文件：  <br>    `node deploy.<span class="hljs-keyword">js`</span><br><span class="hljs-keyword"></span>    <br><br>**选项 <span class="hljs-number">2</span>：如果您想在 Windows 上运行 Ganache（如果您已经在 Windows 上安装了 Ganache）👇**<br><br><span class="hljs-number">1</span>.  转到 Ganache Windows GUI 右上角的设置（齿轮图标）。  <br>    移至**服务器**选项卡并将**主机名**更改为**WSL**（我的也适用于 VirtualBox 和 WiFi）  <br>    端口号和网络 ID 可以保持安全。<br>    <br><span class="hljs-number">2</span>.  单击UI 右上角的**保存并重新启动。**<br>    <br><span class="hljs-number">3</span>.  **现在从RPC 服务器**复制 RPC URL 并将其粘贴到 ethers.<span class="hljs-keyword">js </span><span class="hljs-keyword">JsonRpcProvider() </span>函数参数中。<br>    <br><span class="hljs-number">4</span>.  同时复制任何**私钥**并将其粘贴到 ethers.<span class="hljs-keyword">js </span>Wallet( ) 函数参数中。<br>    <br><span class="hljs-number">5</span>.  **重要步骤（防火墙设置）**：  <br>    转到Windows 上**具有高级安全性的 Windows Defender 防火墙。**  <br>    单击**Inbound Rules** &amp; Search for Ganache  <br>    右键单击​​ Ganache &amp; Go to **Properties**。**然后选中显示允许连接的**  <br>    复选框并单击应用。并关闭此防火墙窗口。<br>    <br><span class="hljs-number">6</span>.  通过在 WSL 终端窗口中运行以下命令来运行 deploy.<span class="hljs-keyword">js </span>文件：  <br>    `node deploy.<span class="hljs-keyword">js`</span><br><span class="hljs-keyword"></span>    <br><br>非常感谢所有回答并提出疑问的人。✌<br></code></pre></td></tr></table></figure><p>虽然我在这个地方卡了很久但是最后解决的时候发现并没有那么麻烦，<br>在网络选择上直接选择主机所处的网段地址即可，最大的问题还是各个包的版本问题</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br><br>  <span class="hljs-string">&quot;dependencies&quot;</span>: &#123;<br><br>    <span class="hljs-string">&quot;dotenv&quot;</span>: <span class="hljs-string">&quot;^16.3.1&quot;</span>,<br><br>    <span class="hljs-string">&quot;ethers&quot;</span>: <span class="hljs-string">&quot;5.6.2&quot;</span>,<br><br>    <span class="hljs-string">&quot;fs-extra&quot;</span>: <span class="hljs-string">&quot;^11.1.1&quot;</span>,<br><br>    <span class="hljs-string">&quot;ganache&quot;</span>: <span class="hljs-string">&quot;^7.9.0&quot;</span>,<br><br>    <span class="hljs-string">&quot;solc&quot;</span>: <span class="hljs-string">&quot;0.8.8&quot;</span><br><br>  &#125;,<br>  <span class="hljs-regexp">//</span>非唯一正确版本，仅供参考<br></code></pre></td></tr></table></figure><p>此外附上linux的ganache相关命令</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a 或 –accounts：指定启动时要创建的测试账户数量。</span><br><span class="hljs-deletion">-e 或 –defaultBalanceEther：分配给每个测试账户的 ether 数量，默认值为 100。</span><br><span class="hljs-deletion">-b 或 r –blockTime：指定自动挖矿的blockTime，以秒为单位，默认值为 0，表示不进行自动挖矿。</span><br><span class="hljs-deletion">-d 或 –deterministic：基于预定的助记词（mnemonic）生成固定的测试账户地址。</span><br><span class="hljs-deletion">-n 或 –secure：默认锁定所有测试账户，有利于进行第三方交易签名。</span><br><span class="hljs-deletion">-m 或 –mnemonic：用于生成测试账户地址的助记词。</span><br><span class="hljs-deletion">-p 或 –port：设置监听端口，默认值为8545。</span><br><span class="hljs-deletion">-h 或 –hostname：设置监听主机，默认值同 NodeJS 的 server.listen()。</span><br><span class="hljs-deletion">-s 或 –seed：设置生成助记词的种子。</span><br><span class="hljs-deletion">-g 或 –gasPrice：设定 Gas 价格， 默认值为 20000000000。</span><br><span class="hljs-deletion">-l 或 –gasLimit：设定 Gas 上限，默认值为 90000。</span><br><span class="hljs-deletion">-f 或 –fork：从一个运行中的以太坊节点客户端软件的指定区块分叉，输入值应当是该节点旳 HTTP 地址和端口，例如 http://localhost:8545。可选使用 @ 标记来指定具体区块，例如：http://localhost:8545@1599200。</span><br><span class="hljs-deletion">-I 或 –networkId：指定网络 id，默认值为当前时间，或使用所分叉链的网络 id。</span><br>–db：设置保存链数据的目录，如果该路径中已经有链数据，ganache-cli 将用它初始化链而不是重新创建。<br>–debug：输出 VM 操作码，用于调试。<br>–mem：输出 ganache-cli 内存使用统计信息，这将替代标准的输出信息。<br>–noVMErrorsOnRPCResponse：不把失败的交易作为 RCP 错误发送，开启这个标志使错误报告方式兼容其他的节点客户端，例如 geth 和 Parity。<br>特殊选项：<br>–account：指定账户私钥和账户余额来创建初始测试账户，可多次设置：<br><br></code></pre></td></tr></table></figure><p>正常运行使用<br><code>yarn run ganache</code>即可</p><h2 id="子系统与主机网络之间的问题（因为网络知识不足不知道如何解决）"><a href="#子系统与主机网络之间的问题（因为网络知识不足不知道如何解决）" class="headerlink" title="子系统与主机网络之间的问题（因为网络知识不足不知道如何解决）"></a>子系统与主机网络之间的问题（因为网络知识不足不知道如何解决）</h2><p>这里使因为前面ganache的问题无法解决而发现的奇怪的地方<br>一开始以为是防火墙的问题导致子系统虚拟机无法访问主机，所以尝试性的区ping了一下，发现子系统确实ping不通。<br>结果阴差阳错之下找到了以为遇到了相同问题的大佬。<br>根据大佬的说法添加一条防火墙规则即可<br>&#96;New-NetFirewallRule -DisplayName “WSL” -Direction Inbound  -InterfaceAlias “vEthernet (WSL)”  -Action Allow<br>似乎还是不行<br>然后区看了下另一篇推荐的博客<br>发现给出上一个建议的博主使用的命令是优化过的版本，原版本是使用ip地址制定规则，但是他给出的是根据wsl的接口制定的规则；<br>原文：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\WINDOWS\system32&gt; <span class="hljs-variable">$myIp</span> = (Ubuntu1804 run <span class="hljs-string">&quot;cat /etc/resolv.conf | grep nameserver | cut -d&#x27; &#x27; -f2&quot;</span>)<br><span class="hljs-built_in">PS</span> C:\WINDOWS\system32&gt; <span class="hljs-variable">$myIp</span><br><span class="hljs-number">172.21</span>.<span class="hljs-number">0.1</span><br><span class="hljs-built_in">PS</span> C:\WINDOWS\system32&gt;  <span class="hljs-built_in">New-NetFirewallRule</span> <span class="hljs-literal">-DisplayName</span> <span class="hljs-string">&quot;WSL&quot;</span> <span class="hljs-literal">-Direction</span> Inbound  <span class="hljs-literal">-LocalAddress</span> <span class="hljs-variable">$myIp</span> <span class="hljs-literal">-Action</span> Allow<br></code></pre></td></tr></table></figure><p>理解：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$myIp</span>=<span class="hljs-string">&#x27;子系统ip&#x27;</span><br><br><span class="hljs-keyword">New</span>-NetFirewallRule -DisplayName <span class="hljs-string">&quot;WSL&quot;</span> -Direction Inbound  -LocalAddress <span class="hljs-symbol">$myIp</span> -Action Allow<br></code></pre></td></tr></table></figure><p>我本来以为那个ip是是子系统ip，但是发现只有当那个ip为空（允许所有本地ip访问）或者ip为主机ip是才能ping通。<br>即：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$myIp</span>=<span class="hljs-string">&#x27;主机ip&#x27;</span><br><br><span class="hljs-keyword">New</span>-NetFirewallRule -DisplayName <span class="hljs-string">&quot;WSL&quot;</span> -Direction Inbound  -LocalAddress <span class="hljs-symbol">$myIp</span> -Action Allow<br></code></pre></td></tr></table></figure><p>然后我去试了下那个接口的<br>还是ping不通，但是突然想起来我能用wireshark来抓包看一下通过接口的流量啊<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202307120939656.png"><br>然后又去试了下放子系统ip的<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202307120940842.png"></p><p>结果是一样的，但是并不知道是哪里出了问题，还请各位大佬指点斧正。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>blog搭建</title>
    <link href="/2023/06/30/blog%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/06/30/blog%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.bilibili.com/video/BV1ts4y1f7Gu/?spm_id_from=333.788.recommend_more_video.-1&vd_source=fe3d172afc9c02fc6b38374df73e29ff">超详细！0成本搭建个人网站！！【建议收藏】_哔哩哔哩_bilibili</a><br>下载git ,nodejs,hexo<br>然后从github上下载主题到hexoblog的themes文件夹（需要解压）<br>然后修改blog文件下的config.yml文件<br>如果要修改主题的一些信息则修改themes文件下的config文件<br>每次修改后都要在git中hexo g<br>hexo s重启博客<br>然后创建gitee仓库<br>然后：git中输入：git config –global user.name “guhuihey”<br>git config –global user.email “<a href="mailto:&#49;&#50;&#x35;&#x37;&#x36;&#49;&#x39;&#55;&#43;&#103;&#x75;&#x68;&#117;&#x69;&#x68;&#101;&#121;&#64;&#x75;&#x73;&#101;&#x72;&#46;&#x6e;&#111;&#x72;&#101;&#112;&#108;&#121;&#46;&#103;&#105;&#x74;&#x65;&#x65;&#46;&#99;&#111;&#109;">&#49;&#50;&#x35;&#x37;&#x36;&#49;&#x39;&#55;&#43;&#103;&#x75;&#x68;&#117;&#x69;&#x68;&#101;&#121;&#64;&#x75;&#x73;&#101;&#x72;&#46;&#x6e;&#111;&#x72;&#101;&#112;&#108;&#121;&#46;&#103;&#105;&#x74;&#x65;&#x65;&#46;&#99;&#111;&#109;</a>“<br>然后<code>$ cat ~/.ssh/id_rsa.pub</code><br>获取生成的ssh密钥<br>然后再gitee中创建ssh密钥<br>然后<code>$ ssh -T git@gitee.com</code><br>再&#96;npm install hexo-deployer-git –save<br>最后hexo g，s，d（部署）完成（这里hexo  s时在本地查看，hexo d才是部署到服务器上）<br>但是这里将博客强制使用gitpages需要实名认证，暂时未弄好</p><p>第二次使用：<br>这里注意是要在blog文件夹中执行命令</p><p>因为gitee不能使用图床所以我干脆用github来搭<br>因为之前用gitee搭建的时候所有东西都是弄好了的<br>所以按理来说只要把地址和链接改成github的就好<br>首先修改deploy的发布地址<br>修改成如下地址<br><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202306301848933.png"></p><p>查看并修改关联用户信息</p><p><img src="https://raw.githubusercontent.com/guhuihey/IMG/main/img/202306301921572.PNG"><br>然后通过<br><code>ssh-keygen -t rsa -C “这里换上你的邮箱”</code><br>这条命令生成对应ssh公私钥<br>然后再github的设置中将新生成的公钥放入ssh连接中<br>最后通过git检验即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/08/hello-world/"/>
    <url>/2023/03/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
